extern alias Generators;
using System.Reflection;
using FluentAssertions;
using JetBrains.Annotations;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;
using Api_MinimalApiMediatRGenerator = Generators::Tools.Generators.Web.Api.MinimalApiMediatRGenerator;

namespace Tools.Generators.Web.Api.UnitTests;

[UsedImplicitly]
public class MinimalApiMediatRGeneratorSpec
{
    private static readonly string[]
        AdditionalCompilationAssemblies =
            { "System.Runtime.dll", "netstandard.dll" }; //HACK: required to analyze custom attributes

    private static CSharpCompilation CreateCompilation(string sourceCode)
    {
        var assemblyPath = Path.GetDirectoryName(typeof(object).Assembly.Location)!;

        var references = new List<MetadataReference>
        {
            MetadataReference.CreateFromFile(typeof(Api_MinimalApiMediatRGenerator).Assembly.Location),
            MetadataReference.CreateFromFile(typeof(Binder).GetTypeInfo().Assembly.Location)
        };
        AdditionalCompilationAssemblies.ToList()
            .ForEach(item => references.Add(MetadataReference.CreateFromFile(Path.Combine(assemblyPath, item))));
        var compilation = CSharpCompilation.Create("compilation",
            new[]
            {
                CSharpSyntaxTree.ParseText(sourceCode)
            },
            references,
            new CSharpCompilationOptions(OutputKind.ConsoleApplication));

        return compilation;
    }

    [Trait("Category", "Unit")]
    public class GivenAServiceClass
    {
        private GeneratorDriver _driver;

        public GivenAServiceClass()
        {
            var generator = new Api_MinimalApiMediatRGenerator();
            _driver = CSharpGeneratorDriver.Create(generator);
        }

        [Fact]
        public void WhenDefinesNoMethods_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                public class ARequest : IWebRequest<AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                    
                        }
                    }
                }


                """);
        }

        [Fact]
        public void WhenDefinesAMethodWithNakedReturnType_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", ServiceOperation.Get)]
                                                public class ARequest : IWebRequest<AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public string AMethod(ARequest request)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithGroupName("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ContentNegotiationFilter>();
                            aserviceclassGroup.MapGet("aroute",
                                async (global::MediatR.IMediator mediator, [global::Microsoft.AspNetCore.Http.AsParameters] global::ANamespace.ARequest request) =>
                                     await mediator.Send(request, global::System.Threading.CancellationToken.None));
                
                        }
                    }
                }

                namespace ANamespace.AServiceClassMediatRHandlers
                {
                    public class AMethod_ARequest_Handler : global::MediatR.IRequestHandler<global::ANamespace.ARequest, global::Microsoft.AspNetCore.Http.IResult>
                    {
                        public async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                        {
                            await Task.CompletedTask;
                            var api = new global::ANamespace.AServiceClass();
                            var result = api.AMethod(request);
                            return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.ServiceOperation.Get);
                        }
                    }

                }


                """);
        }

        [Fact]
        public void WhenDefinesAMethodWithAsyncTaskReturnTypeAndNoCancellationToken_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", ServiceOperation.Get)]
                                                public class ARequest : IWebRequest<AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithGroupName("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ContentNegotiationFilter>();
                            aserviceclassGroup.MapGet("aroute",
                                async (global::MediatR.IMediator mediator, [global::Microsoft.AspNetCore.Http.AsParameters] global::ANamespace.ARequest request) =>
                                     await mediator.Send(request, global::System.Threading.CancellationToken.None));
                
                        }
                    }
                }

                namespace ANamespace.AServiceClassMediatRHandlers
                {
                    public class AMethod_ARequest_Handler : global::MediatR.IRequestHandler<global::ANamespace.ARequest, global::Microsoft.AspNetCore.Http.IResult>
                    {
                        public async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                        {
                            var api = new global::ANamespace.AServiceClass();
                            var result = await api.AMethod(request);
                            return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.ServiceOperation.Get);
                        }
                    }

                }


                """);
        }

        [Fact]
        public void WhenDefinesAMethodWithAsyncTaskReturnTypeAndCancellationToken_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", ServiceOperation.Get)]
                                                public class ARequest : IWebRequest<AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithGroupName("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ContentNegotiationFilter>();
                            aserviceclassGroup.MapGet("aroute",
                                async (global::MediatR.IMediator mediator, [global::Microsoft.AspNetCore.Http.AsParameters] global::ANamespace.ARequest request) =>
                                     await mediator.Send(request, global::System.Threading.CancellationToken.None));
                
                        }
                    }
                }

                namespace ANamespace.AServiceClassMediatRHandlers
                {
                    public class AMethod_ARequest_Handler : global::MediatR.IRequestHandler<global::ANamespace.ARequest, global::Microsoft.AspNetCore.Http.IResult>
                    {
                        public async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                        {
                            var api = new global::ANamespace.AServiceClass();
                            var result = await api.AMethod(request, cancellationToken);
                            return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.ServiceOperation.Get);
                        }
                    }

                }


                """);
        }

        [Fact]
        public void WhenDefinesAMethodAndTestingOnly_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", ServiceOperation.Get, isTestingOnly:true)]
                                                public class ARequest : IWebRequest<AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithGroupName("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ContentNegotiationFilter>();
                #if TESTINGONLY
                            aserviceclassGroup.MapGet("aroute",
                                async (global::MediatR.IMediator mediator, [global::Microsoft.AspNetCore.Http.AsParameters] global::ANamespace.ARequest request) =>
                                     await mediator.Send(request, global::System.Threading.CancellationToken.None));
                #endif
                
                        }
                    }
                }

                namespace ANamespace.AServiceClassMediatRHandlers
                {
                #if TESTINGONLY
                    public class AMethod_ARequest_Handler : global::MediatR.IRequestHandler<global::ANamespace.ARequest, global::Microsoft.AspNetCore.Http.IResult>
                    {
                        public async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                        {
                            var api = new global::ANamespace.AServiceClass();
                            var result = await api.AMethod(request, cancellationToken);
                            return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.ServiceOperation.Get);
                        }
                    }
                #endif

                }


                """);
        }

        [Fact]
        public void WhenDefinesAMethodAndHMACAuth_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", ServiceOperation.Get, access:AccessType.HMAC, isTestingOnly:true)]
                                                public class ARequest : IWebRequest<AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithGroupName("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ContentNegotiationFilter>();
                #if TESTINGONLY
                            aserviceclassGroup.MapGet("aroute",
                                async (global::MediatR.IMediator mediator, [global::Microsoft.AspNetCore.Http.AsParameters] global::ANamespace.ARequest request) =>
                                     await mediator.Send(request, global::System.Threading.CancellationToken.None))
                                .RequireAuthorization("HMAC");
                #endif
                
                        }
                    }
                }

                namespace ANamespace.AServiceClassMediatRHandlers
                {
                #if TESTINGONLY
                    public class AMethod_ARequest_Handler : global::MediatR.IRequestHandler<global::ANamespace.ARequest, global::Microsoft.AspNetCore.Http.IResult>
                    {
                        public async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                        {
                            var api = new global::ANamespace.AServiceClass();
                            var result = await api.AMethod(request, cancellationToken);
                            return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.ServiceOperation.Get);
                        }
                    }
                #endif

                }


                """);
        }

        [Fact]
        public void WhenDefinesAMethodAndTokenAuth_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", ServiceOperation.Get, access:AccessType.Token, isTestingOnly:true)]
                                                public class ARequest : IWebRequest<AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithGroupName("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ContentNegotiationFilter>();
                #if TESTINGONLY
                            aserviceclassGroup.MapGet("aroute",
                                async (global::MediatR.IMediator mediator, [global::Microsoft.AspNetCore.Http.AsParameters] global::ANamespace.ARequest request) =>
                                     await mediator.Send(request, global::System.Threading.CancellationToken.None))
                                .RequireAuthorization("Token");
                #endif
                
                        }
                    }
                }

                namespace ANamespace.AServiceClassMediatRHandlers
                {
                #if TESTINGONLY
                    public class AMethod_ARequest_Handler : global::MediatR.IRequestHandler<global::ANamespace.ARequest, global::Microsoft.AspNetCore.Http.IResult>
                    {
                        public async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                        {
                            var api = new global::ANamespace.AServiceClass();
                            var result = await api.AMethod(request, cancellationToken);
                            return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.ServiceOperation.Get);
                        }
                    }
                #endif

                }


                """);
        }

        [Fact]
        public void WhenDefinesAMethodAndClassConstructor_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Application.Interfaces;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", ServiceOperation.Get)]
                                                public class ARequest : IWebRequest<AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    private readonly ICallerContextFactory _contextFactory;
                                                    
                                                    public CarsApi(ICallerContextFactory contextFactory)
                                                    {
                                                        _contextFactory = contextFactory;
                                                        _carsApplication = carsApplication;
                                                    }
                                                
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;
                using Application.Interfaces;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithGroupName("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ContentNegotiationFilter>();
                            aserviceclassGroup.MapGet("aroute",
                                async (global::MediatR.IMediator mediator, [global::Microsoft.AspNetCore.Http.AsParameters] global::ANamespace.ARequest request) =>
                                     await mediator.Send(request, global::System.Threading.CancellationToken.None));
                
                        }
                    }
                }

                namespace ANamespace.AServiceClassMediatRHandlers
                {
                    public class AMethod_ARequest_Handler : global::MediatR.IRequestHandler<global::ANamespace.ARequest, global::Microsoft.AspNetCore.Http.IResult>
                    {
                        private readonly global::<global namespace>.ICallerContextFactory _contextFactory;
                
                        public AMethod_ARequest_Handler(global::<global namespace>.ICallerContextFactory contextFactory)
                        {
                            this._contextFactory = contextFactory;
                        }
                
                        public async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                        {
                            var api = new global::ANamespace.AServiceClass(this._contextFactory);
                            var result = await api.AMethod(request, cancellationToken);
                            return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.ServiceOperation.Get);
                        }
                    }

                }


                """);
        }

        [Fact]
        public void WhenDefinesAMethodWithMultipleAuthorizeAttributes_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", ServiceOperation.Get, access:AccessType.Token, isTestingOnly:true)]
                                                [Authorize(Roles.Platform_Standard, Features.Platform_Basic)]
                                                [Authorize(Roles.Platform_Operations, Features.Platform_PaidTrial)]
                                                public class ARequest : IWebRequest<AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithGroupName("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ContentNegotiationFilter>();
                #if TESTINGONLY
                            aserviceclassGroup.MapGet("aroute",
                                async (global::MediatR.IMediator mediator, [global::Microsoft.AspNetCore.Http.AsParameters] global::ANamespace.ARequest request) =>
                                     await mediator.Send(request, global::System.Threading.CancellationToken.None))
                                .RequireAuthorization("Token")
                                .RequireCallerAuthorization("POLICY:{|Features|:{|Platform|:[|basic_features|]},|Roles|:{|Platform|:[|standard|]}}POLICY:{|Features|:{|Platform|:[|paidtrial_features|]},|Roles|:{|Platform|:[|operations|]}}");
                #endif
                
                        }
                    }
                }

                namespace ANamespace.AServiceClassMediatRHandlers
                {
                #if TESTINGONLY
                    public class AMethod_ARequest_Handler : global::MediatR.IRequestHandler<global::ANamespace.ARequest, global::Microsoft.AspNetCore.Http.IResult>
                    {
                        public async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                        {
                            var api = new global::ANamespace.AServiceClass();
                            var result = await api.AMethod(request, cancellationToken);
                            return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.ServiceOperation.Get);
                        }
                    }
                #endif

                }


                """);
        }

        [Fact]
        public void WhenDefinesAMethodWithSingleAuthorizeAttribute_ThenGenerates()
        {
            var compilation = CreateCompilation("""
                                                using System;
                                                using System.Threading;
                                                using Infrastructure.Web.Api.Interfaces;

                                                namespace ANamespace;

                                                public class AResponse : IWebResponse
                                                {
                                                }
                                                [Route("aroute", ServiceOperation.Get, access:AccessType.Token, isTestingOnly:true)]
                                                [Authorize(Roles.Platform_Standard, Features.Platform_Basic)]
                                                public class ARequest : IWebRequest<AResponse>
                                                {
                                                }
                                                public class AServiceClass : IWebApiService
                                                {
                                                    public async Task<string> AMethod(ARequest request, CancellationToken cancellationToken)
                                                    {
                                                         return "";
                                                    }
                                                }
                                                """);

            var result = Generate(compilation);

            result.Should().Be(
                """
                // <auto-generated/>
                using System.Threading;
                using System;
                using Microsoft.AspNetCore.Http;
                using Microsoft.AspNetCore.Builder;
                using Infrastructure.Web.Api.Interfaces;
                using Infrastructure.Web.Api.Common.Extensions;

                namespace compilation
                {
                    public static class MinimalApiRegistration
                    {
                        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
                        {
                            var aserviceclassGroup = app.MapGroup(string.Empty)
                                .WithGroupName("AServiceClass")
                                .RequireCors("__DefaultCorsPolicy")
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ApiUsageFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.RequestCorrelationFilter>()
                                .AddEndpointFilter<global::Infrastructure.Web.Api.Common.ContentNegotiationFilter>();
                #if TESTINGONLY
                            aserviceclassGroup.MapGet("aroute",
                                async (global::MediatR.IMediator mediator, [global::Microsoft.AspNetCore.Http.AsParameters] global::ANamespace.ARequest request) =>
                                     await mediator.Send(request, global::System.Threading.CancellationToken.None))
                                .RequireAuthorization("Token")
                                .RequireCallerAuthorization("POLICY:{|Features|:{|Platform|:[|basic_features|]},|Roles|:{|Platform|:[|standard|]}}");
                #endif
                
                        }
                    }
                }

                namespace ANamespace.AServiceClassMediatRHandlers
                {
                #if TESTINGONLY
                    public class AMethod_ARequest_Handler : global::MediatR.IRequestHandler<global::ANamespace.ARequest, global::Microsoft.AspNetCore.Http.IResult>
                    {
                        public async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::ANamespace.ARequest request, global::System.Threading.CancellationToken cancellationToken)
                        {
                            var api = new global::ANamespace.AServiceClass();
                            var result = await api.AMethod(request, cancellationToken);
                            return result.HandleApiResult(global::Infrastructure.Web.Api.Interfaces.ServiceOperation.Get);
                        }
                    }
                #endif

                }


                """);
        }

        private string Generate(CSharpCompilation compilation)
        {
            _driver = _driver.RunGeneratorsAndUpdateCompilation(compilation, out var _, out var _);
            return _driver.GetRunResult().Results[0].GeneratedSources[0].SourceText.ToString();
        }
    }
}