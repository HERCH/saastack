using Application.Interfaces.Resources;

namespace Application.Resources.Shared;

public class PasswordCredential : IIdentifiableResource
{
    public bool IsMfaEnabled { get; set; }

    public required EndUser User { get; set; }

    public required string Id { get; set; }
}

public class PasswordCredentialConfirmation
{
    public required string Token { get; set; }

    public required string Url { get; set; }
}

public enum PasswordCredentialMfaAuthenticatorType
{
    None = 0,
    RecoveryCodes = 1, // Recovery codes
    OobSms = 2, // Code is sent "Out of Band" in an SMS message 
    OobEmail = 3, // Code is sent "Out of Band" in an email message
    TotpAuthenticator = 4 // "Time-based One Time Password" is generated by a supported authenticator App
}

public class PasswordCredentialMfaAuthenticator : IIdentifiableResource
{
    public bool IsActive { get; set; }

    public required PasswordCredentialMfaAuthenticatorType Type { get; set; }

    public required string Id { get; set; }
}

public class PasswordCredentialMfaAuthenticatorAssociation
{
    public string? BarCodeUri { get; set; }

    public string? OobCode { get; set; }

    public List<string>? RecoveryCodes { get; set; }

    public string? Secret { get; set; }

    public required PasswordCredentialMfaAuthenticatorType Type { get; set; }
}

public class PasswordCredentialMfaAuthenticatorChallenge
{
    public string? OobCode { get; set; }

    public PasswordCredentialMfaAuthenticatorType Type { get; set; }
}

public class PasswordCredentialMfaAuthenticatorConfirmation
{
    public List<PasswordCredentialMfaAuthenticator>? Authenticators { get; set; }

    public AuthenticateTokens? Tokens { get; set; }
}