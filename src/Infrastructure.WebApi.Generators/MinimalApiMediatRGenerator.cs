using System.Text;
using Common.Extensions;
using Infrastructure.WebApi.Interfaces;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Infrastructure.WebApi.Generators;

[Generator]
public class MinimalApiMediatRGenerator : ISourceGenerator
{
    private const string Filename = "MinimalApiMediatRGeneratedHandlers.g.cs";
    private const string RegistrationClassName = "MinimalApiRegistration";
    private const string TestingOnlyDirective = "TESTINGONLY";

    private static readonly string[] RequiredUsingNamespaces =
        { "System", "Microsoft.AspNetCore.Builder", "Microsoft.AspNetCore.Http" };

    public void Initialize(GeneratorInitializationContext context)
    {
        // No initialization
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var assemblyNamespace = context.Compilation.AssemblyName;
        var serviceClasses = GetWebApiServiceOperationsFromAssembly(context)
            .GroupBy(registrations => registrations.Class.TypeName)
            .ToList();

        var classUsingNamespaces = BuildUsingList(serviceClasses);
        var handlerClasses = new StringBuilder();
        var endpointRegistrations = new StringBuilder();
        foreach (var serviceRegistrations in serviceClasses)
        {
            BuildHandlerClasses(serviceRegistrations, handlerClasses);

            BuildEndpointRegistrations(serviceRegistrations, endpointRegistrations);
        }

        var fileSource = BuildFile(assemblyNamespace, classUsingNamespaces, endpointRegistrations.ToString(),
            handlerClasses.ToString());

        context.AddSource(Filename, SourceText.From(fileSource, Encoding.UTF8));

        return;

        static string BuildFile(string? assemblyNamespace, string allUsingNamespaces, string allEndpointRegistrations,
            string allHandlerClasses)
        {
            return $@"// <auto-generated/>
{allUsingNamespaces}
namespace {assemblyNamespace}
{{
    public static class {RegistrationClassName}
    {{
        public static void RegisterRoutes(this global::Microsoft.AspNetCore.Builder.WebApplication app)
        {{
    {allEndpointRegistrations}
        }}
    }}
}}

{allHandlerClasses}";
        }
    }

    private static string BuildUsingList(
        List<IGrouping<WebApiProjectVisitor.TypeName,
                WebApiProjectVisitor.ApiServiceOperationRegistration>>
            serviceClasses)
    {
        var usingList = new StringBuilder();

        var allNamespaces = serviceClasses
            .SelectMany(serviceClass => serviceClass)
            .SelectMany(registration => registration.Class.UsingNamespaces)
            .Concat(RequiredUsingNamespaces)
            .Distinct()
            .OrderByDescending(s => s)
            .ToList();

        allNamespaces.ForEach(@using =>
            usingList.AppendLine($"using {@using};"));

        return usingList.ToString();
    }

    private static void BuildEndpointRegistrations(
        IGrouping<WebApiProjectVisitor.TypeName,
                WebApiProjectVisitor.ApiServiceOperationRegistration>
            serviceRegistrations,
        StringBuilder endpointRegistrations)
    {
        var serviceClassName = serviceRegistrations.Key.Name;
        var groupName = $"{serviceClassName.ToLowerInvariant()}Group";
        endpointRegistrations.AppendLine($@"        var {groupName} = app.MapGroup(string.Empty)
                .WithGroupName(""{serviceClassName}"")
                .AddEndpointFilter<global::Infrastructure.WebApi.Common.ContentNegotiationFilter>();");

        foreach (var registration in serviceRegistrations)
        {
            var registerMethodName = ToMinimalApiRegistrationMethodName(registration.OperationType);
            if (registration.IsTestingOnly)
            {
                endpointRegistrations.AppendLine($"#if {TestingOnlyDirective}");
            }

            endpointRegistrations.AppendLine(
                $"            {groupName}.{registerMethodName}(\"{registration.RoutePath}\",");
            endpointRegistrations.AppendLine(
                $"                async (global::MediatR.IMediator mediator, [global::Microsoft.AspNetCore.Http.AsParameters] global::{registration.RequestDtoType.FullName} request) =>");
            endpointRegistrations.AppendLine(
                "                     await mediator.Send(request, global::System.Threading.CancellationToken.None));");
            if (registration.IsTestingOnly)
            {
                endpointRegistrations.AppendLine("#endif");
            }
        }
    }

    private static void BuildHandlerClasses(
        IGrouping<WebApiProjectVisitor.TypeName,
                WebApiProjectVisitor.ApiServiceOperationRegistration>
            serviceRegistrations,
        StringBuilder handlerClasses)
    {
        var serviceClassNamespace = $"{serviceRegistrations.Key.FullName}MediatRHandlers";
        handlerClasses.AppendLine($"namespace {serviceClassNamespace}");
        handlerClasses.AppendLine("{");

        foreach (var registration in serviceRegistrations)
        {
            var constructor = BuildConstructor(registration.RequestDtoType.Name,
                registration.Class.CtorParameters.ToList());

            handlerClasses.AppendLine(
                $"    public class {registration.RequestDtoType.Name}Handler : global::MediatR.IRequestHandler<global::{registration.RequestDtoType.FullName}, global::Microsoft.AspNetCore.Http.IResult>");
            handlerClasses.AppendLine(
                "    {");
            if (constructor.HasValue())
            {
                handlerClasses.AppendLine(constructor);
            }

            if (registration.IsTestingOnly)
            {
                handlerClasses.AppendLine($"#if {TestingOnlyDirective}");
            }

            var requestBody = registration.MethodBody.HasValue()
                ? $"{registration.MethodBody}"
                : "    {}";
            handlerClasses.AppendLine(
                $"        public async Task<global::Microsoft.AspNetCore.Http.IResult> Handle(global::{registration.RequestDtoType.FullName} request, global::System.Threading.CancellationToken cancellationToken)");
            handlerClasses.Append($"{requestBody}");
            if (registration.IsTestingOnly)
            {
                handlerClasses.AppendLine("#endif");
            }

            handlerClasses.AppendLine("    }");
            handlerClasses.AppendLine();
        }

        handlerClasses.AppendLine("}");
        handlerClasses.AppendLine();
    }

    private static string BuildConstructor(string? requestTypeName,
        List<WebApiProjectVisitor.ConstructorParameter> constructorParameters)
    {
        var handlerClassConstructor = new StringBuilder();
        if (constructorParameters.Any())
        {
            foreach (var param in constructorParameters)
            {
                handlerClassConstructor.AppendLine(
                    $"        private readonly global::{param.TypeName.FullName} _{param.VariableName};");
            }

            handlerClassConstructor.AppendLine();
            handlerClassConstructor.Append($"        public {requestTypeName}Handler(");
            var paramsRemaining = constructorParameters.Count();
            foreach (var param in constructorParameters)
            {
                handlerClassConstructor.Append($"global::{param.TypeName.FullName} {param.VariableName}");
                if (--paramsRemaining > 0)
                {
                    handlerClassConstructor.Append(", ");
                }
            }

            handlerClassConstructor.AppendLine(")");
            handlerClassConstructor.AppendLine("        {");
            foreach (var param in constructorParameters)
            {
                handlerClassConstructor.AppendLine(
                    $"            this._{param.VariableName} = {param.VariableName};");
            }

            handlerClassConstructor.AppendLine("        }");
        }

        return handlerClassConstructor.ToString();
    }

    private static List<WebApiProjectVisitor.ApiServiceOperationRegistration> GetWebApiServiceOperationsFromAssembly(
        GeneratorExecutionContext context)
    {
        var visitor = new WebApiProjectVisitor(context.CancellationToken, context.Compilation);
        visitor.Visit(context.Compilation.Assembly);
        return visitor.OperationRegistrations;
    }

    private static string ToMinimalApiRegistrationMethodName(WebApiOperation operation)
    {
        return operation switch
        {
            WebApiOperation.Get => "MapGet",
            WebApiOperation.Search => "MapGet",
            WebApiOperation.Post => "MapPost",
            WebApiOperation.PutPatch => "MapPut",
            WebApiOperation.Delete => "MapDelete",
            _ => "MapGet"
        };
    }
}