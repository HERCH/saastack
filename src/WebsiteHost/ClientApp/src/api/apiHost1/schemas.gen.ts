// This file is auto-generated by @hey-api/openapi-ts

export const APIKeySchema = {
  required: ["id", "key", "userId"],
  type: "object",
  properties: {
    description: {
      type: "string"
    },
    expiresOnUtc: {
      type: "string",
      format: "date-time"
    },
    key: {
      type: "string"
    },
    userId: {
      type: "string"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const AssignPlatformRolesRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    roles: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const AssignRolesToOrganizationRequestSchema = {
  required: ["id", "userId"],
  type: "object",
  properties: {
    roles: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      },
      nullable: true
    },
    userId: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const AssociatePasswordMfaAuthenticatorForCallerRequestSchema = {
  required: ["authenticatorType"],
  type: "object",
  properties: {
    authenticatorType: {
      $ref: "#/components/schemas/PasswordCredentialMfaAuthenticatorType"
    },
    mfaToken: {
      type: "string",
      nullable: true
    },
    phoneNumber: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const AssociatePasswordMfaAuthenticatorForCallerResponseSchema = {
  required: ["authenticator"],
  type: "object",
  properties: {
    authenticator: {
      $ref: "#/components/schemas/PasswordCredentialMfaAuthenticatorAssociation"
    }
  },
  additionalProperties: false
} as const;

export const AuditSchema = {
  required: ["auditCode", "id", "messageTemplate", "organizationId", "templateArguments"],
  type: "object",
  properties: {
    againstId: {
      type: "string"
    },
    auditCode: {
      type: "string"
    },
    messageTemplate: {
      type: "string"
    },
    organizationId: {
      type: "string"
    },
    templateArguments: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const AuthenticatePasswordRequestSchema = {
  required: ["password", "username"],
  type: "object",
  properties: {
    password: {
      minLength: 1,
      type: "string"
    },
    username: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const AuthenticateResponseSchema = {
  required: ["tokens"],
  type: "object",
  properties: {
    tokens: {
      $ref: "#/components/schemas/AuthenticateTokens"
    }
  },
  additionalProperties: false
} as const;

export const AuthenticateSingleSignOnRequestSchema = {
  required: ["authCode", "provider"],
  type: "object",
  properties: {
    authCode: {
      minLength: 1,
      type: "string"
    },
    invitationToken: {
      type: "string",
      nullable: true
    },
    provider: {
      minLength: 1,
      type: "string"
    },
    username: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const AuthenticateTokensSchema = {
  required: ["accessToken", "refreshToken", "userId"],
  type: "object",
  properties: {
    accessToken: {
      $ref: "#/components/schemas/AuthenticationToken"
    },
    refreshToken: {
      $ref: "#/components/schemas/AuthenticationToken"
    },
    userId: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const AuthenticationTokenSchema = {
  required: ["type", "value"],
  type: "object",
  properties: {
    expiresOn: {
      type: "string",
      format: "date-time"
    },
    type: {
      $ref: "#/components/schemas/TokenType"
    },
    value: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const BookingSchema = {
  required: ["borrowerId", "carId", "endUtc", "id", "startUtc"],
  type: "object",
  properties: {
    borrowerId: {
      type: "string"
    },
    carId: {
      type: "string"
    },
    endUtc: {
      type: "string",
      format: "date-time"
    },
    startUtc: {
      type: "string",
      format: "date-time"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const CarSchema = {
  required: ["manufacturer", "owner", "plate"],
  type: "object",
  properties: {
    managers: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CarManager"
      }
    },
    manufacturer: {
      $ref: "#/components/schemas/CarManufacturer"
    },
    owner: {
      $ref: "#/components/schemas/CarOwner"
    },
    plate: {
      $ref: "#/components/schemas/CarLicensePlate"
    },
    status: {
      type: "string"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const CarLicensePlateSchema = {
  required: ["jurisdiction", "number"],
  type: "object",
  properties: {
    jurisdiction: {
      type: "string"
    },
    number: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const CarManagerSchema = {
  required: ["id"],
  type: "object",
  properties: {
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const CarManufacturerSchema = {
  required: ["make", "model", "year"],
  type: "object",
  properties: {
    make: {
      type: "string"
    },
    model: {
      type: "string"
    },
    year: {
      type: "integer",
      format: "int32"
    }
  },
  additionalProperties: false
} as const;

export const CarOwnerSchema = {
  required: ["id"],
  type: "object",
  properties: {
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ChallengePasswordMfaAuthenticatorForCallerRequestSchema = {
  required: ["authenticatorId", "mfaToken"],
  type: "object",
  properties: {
    mfaToken: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ChallengePasswordMfaAuthenticatorForCallerResponseSchema = {
  required: ["challenge"],
  type: "object",
  properties: {
    challenge: {
      $ref: "#/components/schemas/PasswordCredentialMfaAuthenticatorChallenge"
    }
  },
  additionalProperties: false
} as const;

export const ChangeDefaultOrganizationRequestSchema = {
  required: ["organizationId"],
  type: "object",
  properties: {
    organizationId: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ChangeOrganizationRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    name: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ChangePasswordMfaForCallerRequestSchema = {
  required: ["isEnabled"],
  type: "object",
  properties: {
    isEnabled: {
      type: "boolean"
    }
  },
  additionalProperties: false
} as const;

export const ChangePasswordMfaResponseSchema = {
  required: ["credential"],
  type: "object",
  properties: {
    credential: {
      $ref: "#/components/schemas/PasswordCredential"
    }
  },
  additionalProperties: false
} as const;

export const ChangeProfileAvatarResponseSchema = {
  required: ["profile"],
  type: "object",
  properties: {
    profile: {
      $ref: "#/components/schemas/UserProfile"
    }
  },
  additionalProperties: false
} as const;

export const ChangeProfileContactAddressRequestSchema = {
  required: ["userId"],
  type: "object",
  properties: {
    city: {
      type: "string",
      nullable: true
    },
    countryCode: {
      type: "string",
      nullable: true
    },
    line1: {
      type: "string",
      nullable: true
    },
    line2: {
      type: "string",
      nullable: true
    },
    line3: {
      type: "string",
      nullable: true
    },
    state: {
      type: "string",
      nullable: true
    },
    zip: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ChangeProfileRequestSchema = {
  required: ["userId"],
  type: "object",
  properties: {
    displayName: {
      type: "string",
      nullable: true
    },
    firstName: {
      type: "string",
      nullable: true
    },
    lastName: {
      type: "string",
      nullable: true
    },
    phoneNumber: {
      type: "string",
      nullable: true
    },
    timezone: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ChangeSubscriptionPlanRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    planId: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const CompletePasswordResetRequestSchema = {
  required: ["password", "token"],
  type: "object",
  properties: {
    password: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ConfirmEmailDeliveredRequestSchema = {
  required: ["receiptId"],
  type: "object",
  properties: {
    deliveredAtUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    receiptId: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ConfirmEmailDeliveryFailedRequestSchema = {
  required: ["receiptId"],
  type: "object",
  properties: {
    failedAtUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    reason: {
      type: "string",
      nullable: true
    },
    receiptId: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ConfirmPasswordMfaAuthenticatorForCallerRequestSchema = {
  required: ["authenticatorType", "confirmationCode"],
  type: "object",
  properties: {
    confirmationCode: {
      minLength: 1,
      type: "string"
    },
    mfaToken: {
      type: "string",
      nullable: true
    },
    oobCode: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ConfirmPasswordMfaAuthenticatorForCallerResponseSchema = {
  required: ["tokens"],
  type: "object",
  properties: {
    authenticators: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PasswordCredentialMfaAuthenticator"
      }
    },
    tokens: {
      $ref: "#/components/schemas/AuthenticateTokens"
    }
  },
  additionalProperties: false
} as const;

export const ConfirmRegistrationPersonPasswordRequestSchema = {
  required: ["token"],
  type: "object",
  properties: {
    token: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ConfirmRegistrationPersonPasswordResponseSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const ConfirmSmsDeliveredRequestSchema = {
  required: ["receiptId"],
  type: "object",
  properties: {
    deliveredAtUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    receiptId: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ConfirmSmsDeliveryFailedRequestSchema = {
  required: ["receiptId"],
  type: "object",
  properties: {
    failedAtUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    reason: {
      type: "string",
      nullable: true
    },
    receiptId: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const CreateAPIKeyForCallerRequestSchema = {
  type: "object",
  properties: {
    expiresOnUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const CreateAPIKeyResponseSchema = {
  required: ["apiKey"],
  type: "object",
  properties: {
    apiKey: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const CreateOrganizationRequestSchema = {
  required: ["name"],
  type: "object",
  properties: {
    name: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const CustomDtoSchema = {
  required: ["string"],
  type: "object",
  properties: {
    double: {
      type: "number",
      format: "double"
    },
    enum: {
      $ref: "#/components/schemas/CustomEnum"
    },
    integer: {
      type: "integer",
      format: "int32"
    },
    string: {
      type: "string"
    },
    time: {
      type: "string",
      format: "date-time"
    }
  },
  additionalProperties: false
} as const;

export const CustomEnumSchema = {
  enum: ["None", "One", "TwentyOne", "OneHundredAndOne"],
  type: "string"
} as const;

export const DeleteProfileAvatarResponseSchema = {
  required: ["profile"],
  type: "object",
  properties: {
    profile: {
      $ref: "#/components/schemas/UserProfile"
    }
  },
  additionalProperties: false
} as const;

export const DeliverAuditRequestSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const DeliverMessageResponseSchema = {
  required: ["isSent"],
  type: "object",
  properties: {
    isSent: {
      type: "boolean"
    }
  },
  additionalProperties: false
} as const;

export const DeliverUsageRequestSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const DeliveredEmailSchema = {
  required: [
    "attempts",
    "body",
    "id",
    "isDelivered",
    "isDeliveryFailed",
    "isSent",
    "subject",
    "tags",
    "toDisplayName",
    "toEmailAddress"
  ],
  type: "object",
  properties: {
    attempts: {
      type: "array",
      items: {
        required: [
          "date",
          "day",
          "dayOfWeek",
          "dayOfYear",
          "hour",
          "kind",
          "millisecond",
          "microsecond",
          "nanosecond",
          "minute",
          "month",
          "now",
          "second",
          "ticks",
          "timeOfDay",
          "today",
          "year",
          "utcNow"
        ],
        type: "string",
        format: "date-time"
      }
    },
    body: {
      type: "string"
    },
    deliveredAt: {
      type: "string",
      format: "date-time"
    },
    failedDeliveryAt: {
      type: "string",
      format: "date-time"
    },
    failedDeliveryReason: {
      type: "string"
    },
    isDelivered: {
      type: "boolean"
    },
    isDeliveryFailed: {
      type: "boolean"
    },
    isSent: {
      type: "boolean"
    },
    sentAt: {
      type: "string",
      format: "date-time"
    },
    subject: {
      type: "string"
    },
    tags: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    toDisplayName: {
      type: "string"
    },
    toEmailAddress: {
      type: "string"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const DeliveredSmsSchema = {
  required: ["attempts", "body", "id", "isDelivered", "isDeliveryFailed", "isSent", "tags", "toPhoneNumber"],
  type: "object",
  properties: {
    attempts: {
      type: "array",
      items: {
        required: [
          "date",
          "day",
          "dayOfWeek",
          "dayOfYear",
          "hour",
          "kind",
          "millisecond",
          "microsecond",
          "nanosecond",
          "minute",
          "month",
          "now",
          "second",
          "ticks",
          "timeOfDay",
          "today",
          "year",
          "utcNow"
        ],
        type: "string",
        format: "date-time"
      }
    },
    body: {
      type: "string"
    },
    deliveredAt: {
      type: "string",
      format: "date-time"
    },
    failedDeliveryAt: {
      type: "string",
      format: "date-time"
    },
    failedDeliveryReason: {
      type: "string"
    },
    isDelivered: {
      type: "boolean"
    },
    isDeliveryFailed: {
      type: "boolean"
    },
    isSent: {
      type: "boolean"
    },
    sentAt: {
      type: "string",
      format: "date-time"
    },
    tags: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    toPhoneNumber: {
      type: "string"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const DestroyAllRepositoriesRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const DomainEventSchema = {
  required: ["data", "eventType", "id", "metadataFullyQualifiedName", "rootAggregateType", "streamName", "version"],
  type: "object",
  properties: {
    data: {
      type: "string"
    },
    eventType: {
      type: "string"
    },
    metadataFullyQualifiedName: {
      type: "string"
    },
    rootAggregateType: {
      type: "string"
    },
    streamName: {
      type: "string"
    },
    version: {
      type: "integer",
      format: "int32"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const DrainAllAuditsRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const DrainAllDomainEventsRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const DrainAllEmailsRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const DrainAllProvisioningsRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const DrainAllSmsesRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const DrainAllUsagesRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const EmptyResponseSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const EndUserSchema = {
  required: ["access", "classification", "features", "id", "roles", "status"],
  type: "object",
  properties: {
    access: {
      $ref: "#/components/schemas/EndUserAccess"
    },
    classification: {
      $ref: "#/components/schemas/EndUserClassification"
    },
    features: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    roles: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    status: {
      $ref: "#/components/schemas/EndUserStatus"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const EndUserAccessSchema = {
  enum: ["Enabled", "Suspended"],
  type: "string"
} as const;

export const EndUserClassificationSchema = {
  enum: ["Person", "Machine"],
  type: "string"
} as const;

export const EndUserStatusSchema = {
  enum: ["Unregistered", "Registered"],
  type: "string"
} as const;

export const EndUserWithMembershipsSchema = {
  required: ["access", "classification", "features", "id", "memberships", "roles", "status"],
  type: "object",
  properties: {
    access: {
      $ref: "#/components/schemas/EndUserAccess"
    },
    classification: {
      $ref: "#/components/schemas/EndUserClassification"
    },
    features: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    roles: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    status: {
      $ref: "#/components/schemas/EndUserStatus"
    },
    id: {
      type: "string"
    },
    memberships: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Membership"
      }
    }
  },
  additionalProperties: false
} as const;

export const ExportSubscriptionsToMigrateResponseSchema = {
  required: ["metadata", "subscriptions"],
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    subscriptions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SubscriptionToMigrate"
      }
    }
  },
  additionalProperties: false
} as const;

export const FeatureFlagSchema = {
  required: ["isEnabled", "name"],
  type: "object",
  properties: {
    isEnabled: {
      type: "boolean"
    },
    name: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const FilteringSchema = {
  required: ["fields"],
  type: "object",
  properties: {
    fields: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      },
      readOnly: true
    }
  },
  additionalProperties: false
} as const;

export const FormatsTestingOnlyRequestSchema = {
  type: "object",
  properties: {
    custom: {
      $ref: "#/components/schemas/CustomDto"
    },
    double: {
      type: "number",
      format: "double",
      nullable: true
    },
    enum: {
      $ref: "#/components/schemas/CustomEnum"
    },
    integer: {
      type: "integer",
      format: "int32",
      nullable: true
    },
    string: {
      type: "string",
      nullable: true
    },
    time: {
      type: "string",
      format: "date-time",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const FormatsTestingOnlyResponseSchema = {
  required: ["custom", "string"],
  type: "object",
  properties: {
    custom: {
      $ref: "#/components/schemas/CustomDto"
    },
    double: {
      type: "number",
      format: "double"
    },
    enum: {
      $ref: "#/components/schemas/CustomEnum"
    },
    integer: {
      type: "integer",
      format: "int32"
    },
    string: {
      type: "string"
    },
    time: {
      type: "string",
      format: "date-time"
    }
  },
  additionalProperties: false
} as const;

export const GetAllFeatureFlagsResponseSchema = {
  required: ["flags"],
  type: "object",
  properties: {
    flags: {
      type: "array",
      items: {
        $ref: "#/components/schemas/FeatureFlag"
      }
    }
  },
  additionalProperties: false
} as const;

export const GetCallerTestingOnlyResponseSchema = {
  required: ["callerId"],
  type: "object",
  properties: {
    callerId: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const GetCarResponseSchema = {
  required: ["car"],
  type: "object",
  properties: {
    car: {
      $ref: "#/components/schemas/Car"
    }
  },
  additionalProperties: false
} as const;

export const GetFeatureFlagResponseSchema = {
  required: ["flag"],
  type: "object",
  properties: {
    flag: {
      $ref: "#/components/schemas/FeatureFlag"
    }
  },
  additionalProperties: false
} as const;

export const GetIdentityResponseSchema = {
  required: ["identity"],
  type: "object",
  properties: {
    identity: {
      $ref: "#/components/schemas/Identity"
    }
  },
  additionalProperties: false
} as const;

export const GetImageResponseSchema = {
  required: ["image"],
  type: "object",
  properties: {
    image: {
      $ref: "#/components/schemas/Image"
    }
  },
  additionalProperties: false
} as const;

export const GetOrganizationResponseSchema = {
  required: ["organization"],
  type: "object",
  properties: {
    organization: {
      $ref: "#/components/schemas/Organization"
    }
  },
  additionalProperties: false
} as const;

export const GetOrganizationSettingsResponseSchema = {
  required: ["organization", "settings"],
  type: "object",
  properties: {
    organization: {
      $ref: "#/components/schemas/Organization"
    },
    settings: {
      type: "object",
      additionalProperties: {
        required: ["chars", "length"],
        type: "string"
      }
    }
  },
  additionalProperties: false
} as const;

export const GetProfileForCallerResponseSchema = {
  required: ["profile"],
  type: "object",
  properties: {
    profile: {
      $ref: "#/components/schemas/UserProfileForCaller"
    }
  },
  additionalProperties: false
} as const;

export const GetProfileResponseSchema = {
  required: ["profile"],
  type: "object",
  properties: {
    profile: {
      $ref: "#/components/schemas/UserProfile"
    }
  },
  additionalProperties: false
} as const;

export const GetRegistrationPersonConfirmationResponseSchema = {
  required: ["token"],
  type: "object",
  properties: {
    token: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const GetSubscriptionResponseSchema = {
  required: ["subscription"],
  type: "object",
  properties: {
    subscription: {
      $ref: "#/components/schemas/SubscriptionWithPlan"
    }
  },
  additionalProperties: false
} as const;

export const GetUserResponseSchema = {
  required: ["user"],
  type: "object",
  properties: {
    user: {
      $ref: "#/components/schemas/EndUserWithMemberships"
    }
  },
  additionalProperties: false
} as const;

export const HealthCheckResponseSchema = {
  required: ["name", "status"],
  type: "object",
  properties: {
    name: {
      type: "string"
    },
    status: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const IdentitySchema = {
  required: ["hasCredentials", "id", "isMfaEnabled"],
  type: "object",
  properties: {
    isMfaEnabled: {
      type: "boolean"
    },
    hasCredentials: {
      type: "boolean"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ImageSchema = {
  required: ["contentType", "id", "url"],
  type: "object",
  properties: {
    contentType: {
      type: "string"
    },
    description: {
      type: "string"
    },
    filename: {
      type: "string"
    },
    url: {
      type: "string"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const InitiatePasswordResetRequestSchema = {
  required: ["emailAddress"],
  type: "object",
  properties: {
    emailAddress: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const InvitationSchema = {
  required: ["emailAddress", "firstName"],
  type: "object",
  properties: {
    emailAddress: {
      type: "string"
    },
    firstName: {
      type: "string"
    },
    lastName: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const InviteGuestRequestSchema = {
  required: ["email"],
  type: "object",
  properties: {
    email: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const InviteGuestResponseSchema = {
  required: ["invitation"],
  type: "object",
  properties: {
    invitation: {
      $ref: "#/components/schemas/Invitation"
    }
  },
  additionalProperties: false
} as const;

export const InviteMemberToOrganizationRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    email: {
      type: "string",
      nullable: true
    },
    userId: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const InviteMemberToOrganizationResponseSchema = {
  required: ["organization"],
  type: "object",
  properties: {
    organization: {
      $ref: "#/components/schemas/Organization"
    }
  },
  additionalProperties: false
} as const;

export const InvoiceSchema = {
  required: ["currency", "id", "includesTax", "lineItems", "notes", "status"],
  type: "object",
  properties: {
    amount: {
      type: "number",
      format: "double"
    },
    currency: {
      type: "string"
    },
    includesTax: {
      type: "boolean"
    },
    invoicedOnUtc: {
      type: "string",
      format: "date-time"
    },
    lineItems: {
      type: "array",
      items: {
        $ref: "#/components/schemas/InvoiceLineItem"
      }
    },
    notes: {
      type: "array",
      items: {
        $ref: "#/components/schemas/InvoiceNote"
      }
    },
    payment: {
      $ref: "#/components/schemas/InvoiceItemPayment"
    },
    periodEndUtc: {
      type: "string",
      format: "date-time"
    },
    periodStartUtc: {
      type: "string",
      format: "date-time"
    },
    status: {
      $ref: "#/components/schemas/InvoiceStatus"
    },
    taxAmount: {
      type: "number",
      format: "double"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const InvoiceItemPaymentSchema = {
  required: ["currency", "reference"],
  type: "object",
  properties: {
    amount: {
      type: "number",
      format: "double"
    },
    currency: {
      type: "string"
    },
    paidOnUtc: {
      type: "string",
      format: "date-time"
    },
    reference: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const InvoiceLineItemSchema = {
  required: ["currency", "description", "isTaxed", "reference"],
  type: "object",
  properties: {
    amount: {
      type: "number",
      format: "double"
    },
    currency: {
      type: "string"
    },
    description: {
      type: "string"
    },
    isTaxed: {
      type: "boolean"
    },
    reference: {
      type: "string"
    },
    taxAmount: {
      type: "number",
      format: "double"
    }
  },
  additionalProperties: false
} as const;

export const InvoiceNoteSchema = {
  required: ["description"],
  type: "object",
  properties: {
    description: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const InvoiceStatusSchema = {
  enum: ["Unpaid", "Paid"],
  type: "string"
} as const;

export const InvoiceSummarySchema = {
  required: ["amount", "currency"],
  type: "object",
  properties: {
    amount: {
      type: "number",
      format: "double"
    },
    currency: {
      type: "string"
    },
    nextUtc: {
      type: "string",
      format: "date-time"
    }
  },
  additionalProperties: false
} as const;

export const ListMembersForOrganizationResponseSchema = {
  required: ["members", "metadata"],
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    members: {
      type: "array",
      items: {
        $ref: "#/components/schemas/OrganizationMember"
      }
    }
  },
  additionalProperties: false
} as const;

export const ListMembershipsForCallerResponseSchema = {
  required: ["memberships", "metadata"],
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    memberships: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Membership"
      }
    }
  },
  additionalProperties: false
} as const;

export const ListPasswordMfaAuthenticatorsForCallerResponseSchema = {
  required: ["authenticators"],
  type: "object",
  properties: {
    authenticators: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PasswordCredentialMfaAuthenticator"
      }
    }
  },
  additionalProperties: false
} as const;

export const ListPricingPlansResponseSchema = {
  required: ["plans"],
  type: "object",
  properties: {
    plans: {
      $ref: "#/components/schemas/PricingPlans"
    }
  },
  additionalProperties: false
} as const;

export const MachineCredentialSchema = {
  required: ["apiKey", "createdById", "id"],
  type: "object",
  properties: {
    apiKey: {
      type: "string"
    },
    createdById: {
      type: "string"
    },
    description: {
      type: "string"
    },
    expiresOnUtc: {
      type: "string",
      format: "date-time"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const MailgunDeliveryStatusSchema = {
  required: ["description"],
  type: "object",
  properties: {
    description: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const MailgunEventDataSchema = {
  required: ["deliveryStatus", "event", "id", "message", "reason", "severity"],
  type: "object",
  properties: {
    "delivery-status": {
      $ref: "#/components/schemas/MailgunDeliveryStatus"
    },
    event: {
      type: "string"
    },
    id: {
      type: "string"
    },
    message: {
      $ref: "#/components/schemas/MailgunMessage"
    },
    reason: {
      type: "string"
    },
    severity: {
      type: "string"
    },
    timestamp: {
      type: "number",
      format: "double"
    }
  },
  additionalProperties: false
} as const;

export const MailgunMessageSchema = {
  required: ["headers"],
  type: "object",
  properties: {
    headers: {
      $ref: "#/components/schemas/MailgunMessageHeaders"
    }
  },
  additionalProperties: false
} as const;

export const MailgunMessageHeadersSchema = {
  required: ["from", "messageId", "subject", "to"],
  type: "object",
  properties: {
    from: {
      type: "string"
    },
    "message-id": {
      type: "string"
    },
    subject: {
      type: "string"
    },
    to: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const MailgunNotifyWebhookEventRequestSchema = {
  type: "object",
  properties: {
    "event-data": {
      $ref: "#/components/schemas/MailgunEventData"
    },
    signature: {
      $ref: "#/components/schemas/MailgunSignature"
    }
  },
  additionalProperties: false
} as const;

export const MailgunSignatureSchema = {
  required: ["signature", "timestamp", "token"],
  type: "object",
  properties: {
    signature: {
      type: "string"
    },
    timestamp: {
      type: "string"
    },
    token: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const MakeBookingRequestSchema = {
  required: ["carId", "startUtc"],
  type: "object",
  properties: {
    organizationId: {
      type: "string",
      description:
        "An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used",
      nullable: true
    },
    carId: {
      minLength: 1,
      type: "string"
    },
    endUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    startUtc: {
      type: "string",
      format: "date-time"
    }
  },
  additionalProperties: false
} as const;

export const MakeBookingResponseSchema = {
  required: ["booking"],
  type: "object",
  properties: {
    booking: {
      $ref: "#/components/schemas/Booking"
    }
  },
  additionalProperties: false
} as const;

export const MembershipSchema = {
  required: ["features", "id", "isDefault", "organizationId", "ownership", "roles", "userId"],
  type: "object",
  properties: {
    features: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    isDefault: {
      type: "boolean"
    },
    organizationId: {
      type: "string"
    },
    ownership: {
      $ref: "#/components/schemas/OrganizationOwnership"
    },
    roles: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    userId: {
      type: "string"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const MigrateSubscriptionRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    providerName: {
      type: "string",
      nullable: true
    },
    providerState: {
      type: "object",
      additionalProperties: {
        required: ["chars", "length"],
        type: "string",
        nullable: true
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const MigrateSubscriptionResponseSchema = {
  required: ["subscription"],
  type: "object",
  properties: {
    subscription: {
      $ref: "#/components/schemas/Subscription"
    }
  },
  additionalProperties: false
} as const;

export const NotifyDomainEventRequestSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const NotifyProvisioningRequestSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const OpenApiPostTestingOnlyRequestSchema = {
  required: ["id", "requiredField"],
  type: "object",
  properties: {
    optionalField: {
      type: "string",
      description: "anoptionalfield",
      nullable: true
    },
    requiredField: {
      minLength: 1,
      type: "string",
      description: "arequiredfield"
    }
  },
  additionalProperties: false
} as const;

export const OpenApiPutTestingOnlyRequestSchema = {
  required: ["id", "requiredField"],
  type: "object",
  properties: {
    optionalField: {
      type: "string",
      description: "anoptionalfield",
      nullable: true
    },
    requiredField: {
      minLength: 1,
      type: "string",
      description: "arequiredfield"
    }
  },
  additionalProperties: false
} as const;

export const OpenApiResponseObjectSchema = {
  required: ["anAnnotatedRequiredField", "anInitializedField", "aRequiredField", "aValueTypeField"],
  type: "object",
  properties: {
    anAnnotatedRequiredField: {
      minLength: 1,
      type: "string"
    },
    anInitializedField: {
      type: "string"
    },
    aNullableField: {
      type: "string"
    },
    aNullableValueTypeField: {
      type: "boolean"
    },
    aRequiredField: {
      type: "string"
    },
    aValueTypeField: {
      type: "boolean"
    }
  },
  additionalProperties: false
} as const;

export const OpenApiTestingOnlyResponseSchema = {
  required: ["anAnnotatedRequiredField", "anInitializedField", "aRequiredField", "aValueTypeField", "message"],
  type: "object",
  properties: {
    anAnnotatedRequiredField: {
      minLength: 1,
      type: "string"
    },
    anInitializedField: {
      type: "string"
    },
    anNullableObject: {
      $ref: "#/components/schemas/OpenApiResponseObject"
    },
    aNullableField: {
      type: "string"
    },
    aNullableValueTypeField: {
      type: "boolean"
    },
    aRequiredField: {
      type: "string"
    },
    aValueTypeField: {
      type: "boolean"
    },
    message: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const OrganizationSchema = {
  required: ["createdById", "id", "name", "ownership"],
  type: "object",
  properties: {
    avatarUrl: {
      type: "string"
    },
    createdById: {
      type: "string"
    },
    name: {
      type: "string"
    },
    ownership: {
      $ref: "#/components/schemas/OrganizationOwnership"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const OrganizationMemberSchema = {
  required: ["classification", "features", "id", "isDefault", "isOwner", "isRegistered", "name", "roles", "userId"],
  type: "object",
  properties: {
    classification: {
      $ref: "#/components/schemas/UserProfileClassification"
    },
    emailAddress: {
      type: "string"
    },
    features: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    isDefault: {
      type: "boolean"
    },
    isOwner: {
      type: "boolean"
    },
    isRegistered: {
      type: "boolean"
    },
    name: {
      $ref: "#/components/schemas/PersonName"
    },
    roles: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    userId: {
      type: "string"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const OrganizationOwnershipSchema = {
  enum: ["Shared", "Personal"],
  type: "string"
} as const;

export const PasswordCredentialSchema = {
  required: ["id", "isMfaEnabled", "user"],
  type: "object",
  properties: {
    isMfaEnabled: {
      type: "boolean"
    },
    user: {
      $ref: "#/components/schemas/EndUser"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const PasswordCredentialMfaAuthenticatorSchema = {
  required: ["id", "isActive", "type"],
  type: "object",
  properties: {
    isActive: {
      type: "boolean"
    },
    type: {
      $ref: "#/components/schemas/PasswordCredentialMfaAuthenticatorType"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const PasswordCredentialMfaAuthenticatorAssociationSchema = {
  required: ["barCodeUri", "oobCode", "secret", "type"],
  type: "object",
  properties: {
    barCodeUri: {
      type: "string"
    },
    oobCode: {
      type: "string"
    },
    recoveryCodes: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    secret: {
      type: "string"
    },
    type: {
      $ref: "#/components/schemas/PasswordCredentialMfaAuthenticatorType"
    }
  },
  additionalProperties: false
} as const;

export const PasswordCredentialMfaAuthenticatorChallengeSchema = {
  required: ["oobCode", "type"],
  type: "object",
  properties: {
    oobCode: {
      type: "string"
    },
    type: {
      $ref: "#/components/schemas/PasswordCredentialMfaAuthenticatorType"
    }
  },
  additionalProperties: false
} as const;

export const PasswordCredentialMfaAuthenticatorTypeSchema = {
  enum: ["None", "RecoveryCodes", "OobSms", "OobEmail", "TotpAuthenticator"],
  type: "string"
} as const;

export const PaymentMethodStatusSchema = {
  enum: ["Invalid", "Valid"],
  type: "string"
} as const;

export const PaymentMethodTypeSchema = {
  enum: ["None", "Card", "Other"],
  type: "string"
} as const;

export const PeriodFrequencyUnitSchema = {
  enum: ["Eternity", "Day", "Week", "Month", "Year"],
  type: "string"
} as const;

export const PersonNameSchema = {
  required: ["firstName"],
  type: "object",
  properties: {
    firstName: {
      type: "string"
    },
    lastName: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const PlanPeriodSchema = {
  required: ["frequency", "unit"],
  type: "object",
  properties: {
    frequency: {
      type: "integer",
      format: "int32"
    },
    unit: {
      $ref: "#/components/schemas/PeriodFrequencyUnit"
    }
  },
  additionalProperties: false
} as const;

export const PostInsecureTestingOnlyRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const PostWithEmptyBodyTestingOnlyRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const PostWithEnumTestingOnlyRequestSchema = {
  type: "object",
  properties: {
    anEnum: {
      $ref: "#/components/schemas/TestEnum"
    },
    aProperty: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const PostWithRouteParamsAndEmptyBodyTestingOnlyRequestSchema = {
  required: ["aNumberProperty", "aStringProperty"],
  type: "object",
  additionalProperties: false
} as const;

export const PricingFeatureItemSchema = {
  required: ["description", "isIncluded"],
  type: "object",
  properties: {
    description: {
      type: "string"
    },
    isIncluded: {
      type: "boolean"
    }
  },
  additionalProperties: false
} as const;

export const PricingFeatureSectionSchema = {
  required: ["features"],
  type: "object",
  properties: {
    description: {
      type: "string"
    },
    features: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingFeatureItem"
      }
    }
  },
  additionalProperties: false
} as const;

export const PricingPlanSchema = {
  required: ["cost", "currency", "featureSection", "id", "isRecommended", "period", "setupCost"],
  type: "object",
  properties: {
    cost: {
      type: "number",
      format: "double"
    },
    currency: {
      type: "string"
    },
    description: {
      type: "string"
    },
    displayName: {
      type: "string"
    },
    featureSection: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingFeatureSection"
      }
    },
    isRecommended: {
      type: "boolean"
    },
    notes: {
      type: "string"
    },
    period: {
      $ref: "#/components/schemas/PlanPeriod"
    },
    setupCost: {
      type: "number",
      format: "double"
    },
    trial: {
      $ref: "#/components/schemas/SubscriptionTrialPeriod"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const PricingPlansSchema = {
  required: ["annually", "daily", "eternally", "monthly", "weekly"],
  type: "object",
  properties: {
    annually: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingPlan"
      }
    },
    daily: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingPlan"
      }
    },
    eternally: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingPlan"
      }
    },
    monthly: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingPlan"
      }
    },
    weekly: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingPlan"
      }
    }
  },
  additionalProperties: false
} as const;

export const ProblemDetailsSchema = {
  required: ["detail", "instance", "title", "type"],
  type: "object",
  properties: {
    type: {
      type: "string"
    },
    title: {
      type: "string"
    },
    status: {
      type: "integer",
      format: "int32"
    },
    detail: {
      type: "string"
    },
    instance: {
      type: "string"
    }
  },
  additionalProperties: {}
} as const;

export const ProfileAddressSchema = {
  required: ["city", "line1", "line2", "line3", "state", "zip"],
  type: "object",
  properties: {
    city: {
      type: "string"
    },
    countryCode: {
      type: "string"
    },
    line1: {
      type: "string"
    },
    line2: {
      type: "string"
    },
    line3: {
      type: "string"
    },
    state: {
      type: "string"
    },
    zip: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const RecordMeasureRequestSchema = {
  required: ["eventName"],
  type: "object",
  properties: {
    additional: {
      type: "object",
      additionalProperties: {
        nullable: true
      },
      nullable: true
    },
    eventName: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const RecordUseRequestSchema = {
  required: ["eventName"],
  type: "object",
  properties: {
    additional: {
      type: "object",
      additionalProperties: {
        nullable: true
      },
      nullable: true
    },
    eventName: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const RefreshTokenRequestSchema = {
  required: ["refreshToken"],
  type: "object",
  properties: {
    refreshToken: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const RefreshTokenResponseSchema = {
  required: ["tokens"],
  type: "object",
  properties: {
    tokens: {
      $ref: "#/components/schemas/AuthenticateTokens"
    }
  },
  additionalProperties: false
} as const;

export const RegisterCarRequestSchema = {
  required: ["jurisdiction", "make", "model", "numberPlate", "year"],
  type: "object",
  properties: {
    organizationId: {
      type: "string",
      description:
        "An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used",
      nullable: true
    },
    jurisdiction: {
      minLength: 1,
      type: "string"
    },
    make: {
      minLength: 1,
      type: "string"
    },
    model: {
      minLength: 1,
      type: "string"
    },
    numberPlate: {
      minLength: 1,
      type: "string"
    },
    year: {
      type: "integer",
      format: "int32"
    }
  },
  additionalProperties: false
} as const;

export const RegisterMachineRequestSchema = {
  required: ["name"],
  type: "object",
  properties: {
    apiKeyExpiresOnUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    countryCode: {
      type: "string",
      nullable: true
    },
    name: {
      minLength: 1,
      type: "string"
    },
    timezone: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const RegisterMachineResponseSchema = {
  required: ["machine"],
  type: "object",
  properties: {
    machine: {
      $ref: "#/components/schemas/MachineCredential"
    }
  },
  additionalProperties: false
} as const;

export const RegisterPersonPasswordRequestSchema = {
  required: ["emailAddress", "firstName", "lastName", "password"],
  type: "object",
  properties: {
    countryCode: {
      type: "string",
      nullable: true
    },
    emailAddress: {
      minLength: 1,
      type: "string"
    },
    firstName: {
      minLength: 1,
      type: "string"
    },
    invitationToken: {
      type: "string",
      nullable: true
    },
    lastName: {
      minLength: 1,
      type: "string"
    },
    password: {
      minLength: 1,
      type: "string"
    },
    termsAndConditionsAccepted: {
      type: "boolean"
    },
    timezone: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const RegisterPersonPasswordResponseSchema = {
  required: ["credential"],
  type: "object",
  properties: {
    credential: {
      $ref: "#/components/schemas/PasswordCredential"
    }
  },
  additionalProperties: false
} as const;

export const ResendGuestInvitationRequestSchema = {
  required: ["token"],
  type: "object",
  additionalProperties: false
} as const;

export const ResendPasswordResetRequestSchema = {
  required: ["token"],
  type: "object",
  additionalProperties: false
} as const;

export const ResetPasswordMfaRequestSchema = {
  type: "object",
  properties: {
    userId: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ScheduleMaintenanceCarRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    organizationId: {
      type: "string",
      description:
        "An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used",
      nullable: true
    },
    fromUtc: {
      type: "string",
      format: "date-time"
    },
    toUtc: {
      type: "string",
      format: "date-time"
    }
  },
  additionalProperties: false
} as const;

export const SearchAllAPIKeysResponseSchema = {
  required: ["keys", "metadata"],
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    keys: {
      type: "array",
      items: {
        $ref: "#/components/schemas/APIKey"
      }
    }
  },
  additionalProperties: false
} as const;

export const SearchAllAuditsResponseSchema = {
  required: ["audits", "metadata"],
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    audits: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Audit"
      }
    }
  },
  additionalProperties: false
} as const;

export const SearchAllBookingsResponseSchema = {
  required: ["bookings", "metadata"],
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    bookings: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Booking"
      }
    }
  },
  additionalProperties: false
} as const;

export const SearchAllCarUnavailabilitiesResponseSchema = {
  required: ["metadata", "unavailabilities"],
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    unavailabilities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Unavailability"
      }
    }
  },
  additionalProperties: false
} as const;

export const SearchAllCarsResponseSchema = {
  required: ["cars", "metadata"],
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    cars: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Car"
      }
    }
  },
  additionalProperties: false
} as const;

export const SearchAllDomainEventsResponseSchema = {
  required: ["events", "metadata"],
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    events: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DomainEvent"
      }
    }
  },
  additionalProperties: false
} as const;

export const SearchEmailDeliveriesResponseSchema = {
  required: ["emails", "metadata"],
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    emails: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DeliveredEmail"
      }
    }
  },
  additionalProperties: false
} as const;

export const SearchResultMetadataSchema = {
  required: ["filter", "limit", "offset", "sort", "total"],
  type: "object",
  properties: {
    filter: {
      $ref: "#/components/schemas/Filtering"
    },
    limit: {
      type: "integer",
      format: "int32"
    },
    offset: {
      type: "integer",
      format: "int32"
    },
    sort: {
      $ref: "#/components/schemas/Sorting"
    },
    total: {
      type: "integer",
      format: "int32"
    }
  },
  additionalProperties: false
} as const;

export const SearchSmsDeliveriesResponseSchema = {
  required: ["metadata", "smses"],
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    smses: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DeliveredSms"
      }
    }
  },
  additionalProperties: false
} as const;

export const SearchSubscriptionHistoryResponseSchema = {
  required: ["invoices", "metadata"],
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    invoices: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Invoice"
      }
    }
  },
  additionalProperties: false
} as const;

export const SendEmailRequestSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const SendSmsRequestSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const SortDirectionSchema = {
  enum: ["Ascending", "Descending"],
  type: "string"
} as const;

export const SortingSchema = {
  required: ["by", "direction"],
  type: "object",
  properties: {
    by: {
      type: "string"
    },
    direction: {
      $ref: "#/components/schemas/SortDirection"
    }
  },
  additionalProperties: false
} as const;

export const StatusesPostTestingOnlyRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const StatusesPostWithLocationTestingOnlyRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const StatusesPutPatchTestingOnlyRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const StatusesTestingOnlyResponseSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const StatusesTestingOnlySearchResponseSchema = {
  required: ["messages", "metadata"],
  type: "object",
  properties: {
    messages: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    }
  },
  additionalProperties: false
} as const;

export const StringMessageTestingOnlyResponseSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const SubscriptionSchema = {
  required: ["buyerId", "id", "owningEntityId", "providerState"],
  type: "object",
  properties: {
    buyerId: {
      type: "string"
    },
    owningEntityId: {
      type: "string"
    },
    providerName: {
      type: "string"
    },
    providerState: {
      type: "object",
      additionalProperties: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const SubscriptionPaymentMethodSchema = {
  required: ["status", "type"],
  type: "object",
  properties: {
    expiresOn: {
      type: "string",
      format: "date"
    },
    status: {
      $ref: "#/components/schemas/PaymentMethodStatus"
    },
    type: {
      $ref: "#/components/schemas/PaymentMethodType"
    }
  },
  additionalProperties: false
} as const;

export const SubscriptionPlanSchema = {
  required: ["id", "isTrial", "tier"],
  type: "object",
  properties: {
    id: {
      type: "string"
    },
    isTrial: {
      type: "boolean"
    },
    tier: {
      $ref: "#/components/schemas/SubscriptionTier"
    },
    trialEndDateUtc: {
      type: "string",
      format: "date-time"
    }
  },
  additionalProperties: false
} as const;

export const SubscriptionStatusSchema = {
  enum: ["Unsubscribed", "Activated", "Canceled", "Canceling"],
  type: "string"
} as const;

export const SubscriptionTierSchema = {
  enum: ["Unsubscribed", "Standard", "Professional", "Enterprise"],
  type: "string"
} as const;

export const SubscriptionToMigrateSchema = {
  required: ["buyer", "buyerId", "id", "owningEntityId", "providerState"],
  type: "object",
  properties: {
    buyerId: {
      type: "string"
    },
    owningEntityId: {
      type: "string"
    },
    providerName: {
      type: "string"
    },
    providerState: {
      type: "object",
      additionalProperties: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    id: {
      type: "string"
    },
    buyer: {
      type: "object",
      additionalProperties: {
        required: ["chars", "length"],
        type: "string"
      }
    }
  },
  additionalProperties: false
} as const;

export const SubscriptionTrialPeriodSchema = {
  required: ["frequency", "hasTrial", "unit"],
  type: "object",
  properties: {
    frequency: {
      type: "integer",
      format: "int32"
    },
    hasTrial: {
      type: "boolean"
    },
    unit: {
      $ref: "#/components/schemas/PeriodFrequencyUnit"
    }
  },
  additionalProperties: false
} as const;

export const SubscriptionWithPlanSchema = {
  required: [
    "buyerId",
    "buyerReference",
    "canBeCanceled",
    "canBeUnsubscribed",
    "id",
    "invoice",
    "owningEntityId",
    "paymentMethod",
    "period",
    "plan",
    "providerState",
    "status"
  ],
  type: "object",
  properties: {
    buyerId: {
      type: "string"
    },
    owningEntityId: {
      type: "string"
    },
    providerName: {
      type: "string"
    },
    providerState: {
      type: "object",
      additionalProperties: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    id: {
      type: "string"
    },
    buyerReference: {
      type: "string"
    },
    canBeCanceled: {
      type: "boolean"
    },
    canBeUnsubscribed: {
      type: "boolean"
    },
    canceledDateUtc: {
      type: "string",
      format: "date-time"
    },
    invoice: {
      $ref: "#/components/schemas/InvoiceSummary"
    },
    paymentMethod: {
      $ref: "#/components/schemas/SubscriptionPaymentMethod"
    },
    period: {
      $ref: "#/components/schemas/PlanPeriod"
    },
    plan: {
      $ref: "#/components/schemas/SubscriptionPlan"
    },
    status: {
      $ref: "#/components/schemas/SubscriptionStatus"
    },
    subscriptionReference: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const TakeOfflineCarRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    organizationId: {
      type: "string",
      description:
        "An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used",
      nullable: true
    },
    fromUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    toUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const TestEnumSchema = {
  enum: ["Value1", "Value2", "Value3"],
  type: "string"
} as const;

export const TokenTypeSchema = {
  enum: ["OtherToken", "AccessToken", "RefreshToken"],
  type: "string"
} as const;

export const TransferSubscriptionRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    userId: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const TwilioMessageStatusSchema = {
  enum: [
    "Unknown",
    "queued",
    "sending",
    "sent",
    "failed",
    "delivered",
    "undelivered",
    "receiving",
    "received",
    "accepted",
    "scheduled",
    "read",
    "canceled"
  ],
  type: "string"
} as const;

export const UnInviteMemberFromOrganizationResponseSchema = {
  required: ["organization"],
  type: "object",
  properties: {
    organization: {
      $ref: "#/components/schemas/Organization"
    }
  },
  additionalProperties: false
} as const;

export const UnassignPlatformRolesRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    roles: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const UnassignRolesFromOrganizationRequestSchema = {
  required: ["id", "userId"],
  type: "object",
  properties: {
    roles: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      },
      nullable: true
    },
    userId: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const UnavailabilitySchema = {
  required: ["carId", "causedByReason", "id"],
  type: "object",
  properties: {
    carId: {
      type: "string"
    },
    causedByReason: {
      type: "string"
    },
    causedByReference: {
      type: "string"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const UpdateImageRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    description: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const UpdateImageResponseSchema = {
  required: ["image"],
  type: "object",
  properties: {
    image: {
      $ref: "#/components/schemas/Image"
    }
  },
  additionalProperties: false
} as const;

export const UpdateUserResponseSchema = {
  required: ["user"],
  type: "object",
  properties: {
    user: {
      $ref: "#/components/schemas/EndUser"
    }
  },
  additionalProperties: false
} as const;

export const UploadImageResponseSchema = {
  required: ["image"],
  type: "object",
  properties: {
    image: {
      $ref: "#/components/schemas/Image"
    }
  },
  additionalProperties: false
} as const;

export const UserProfileSchema = {
  required: ["address", "classification", "displayName", "id", "name", "userId"],
  type: "object",
  properties: {
    address: {
      $ref: "#/components/schemas/ProfileAddress"
    },
    avatarUrl: {
      type: "string"
    },
    classification: {
      $ref: "#/components/schemas/UserProfileClassification"
    },
    displayName: {
      type: "string"
    },
    emailAddress: {
      type: "string"
    },
    name: {
      $ref: "#/components/schemas/PersonName"
    },
    phoneNumber: {
      type: "string"
    },
    timezone: {
      type: "string"
    },
    userId: {
      type: "string"
    },
    id: {
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const UserProfileClassificationSchema = {
  enum: ["Person", "Machine"],
  type: "string"
} as const;

export const UserProfileForCallerSchema = {
  required: [
    "address",
    "classification",
    "defaultOrganizationId",
    "displayName",
    "features",
    "id",
    "isAuthenticated",
    "name",
    "roles",
    "userId"
  ],
  type: "object",
  properties: {
    address: {
      $ref: "#/components/schemas/ProfileAddress"
    },
    avatarUrl: {
      type: "string"
    },
    classification: {
      $ref: "#/components/schemas/UserProfileClassification"
    },
    displayName: {
      type: "string"
    },
    emailAddress: {
      type: "string"
    },
    name: {
      $ref: "#/components/schemas/PersonName"
    },
    phoneNumber: {
      type: "string"
    },
    timezone: {
      type: "string"
    },
    userId: {
      type: "string"
    },
    id: {
      type: "string"
    },
    defaultOrganizationId: {
      type: "string"
    },
    features: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    },
    isAuthenticated: {
      type: "boolean"
    },
    roles: {
      type: "array",
      items: {
        required: ["chars", "length"],
        type: "string"
      }
    }
  },
  additionalProperties: false
} as const;

export const ValidationsValidatedPostTestingOnlyRequestSchema = {
  required: ["id", "requiredField"],
  type: "object",
  properties: {
    optionalField: {
      type: "string",
      nullable: true
    },
    requiredField: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const VerifyGuestInvitationResponseSchema = {
  required: ["invitation"],
  type: "object",
  properties: {
    invitation: {
      $ref: "#/components/schemas/Invitation"
    }
  },
  additionalProperties: false
} as const;

export const VerifyPasswordMfaAuthenticatorForCallerRequestSchema = {
  required: ["authenticatorType", "confirmationCode", "mfaToken"],
  type: "object",
  properties: {
    confirmationCode: {
      minLength: 1,
      type: "string"
    },
    mfaToken: {
      minLength: 1,
      type: "string"
    },
    oobCode: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;
