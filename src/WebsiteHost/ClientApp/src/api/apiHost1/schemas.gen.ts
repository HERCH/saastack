// This file is auto-generated by @hey-api/openapi-ts

export const APIKeySchema = {
  type: "object",
  properties: {
    description: {
      type: "string",
      nullable: true
    },
    expiresOnUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    key: {
      type: "string",
      nullable: true
    },
    userId: {
      type: "string",
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const AssignPlatformRolesRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    roles: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const AssignRolesToOrganizationRequestSchema = {
  required: ["id", "userId"],
  type: "object",
  properties: {
    roles: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    userId: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const AuditSchema = {
  type: "object",
  properties: {
    againstId: {
      type: "string",
      nullable: true
    },
    auditCode: {
      type: "string",
      nullable: true
    },
    messageTemplate: {
      type: "string",
      nullable: true
    },
    organizationId: {
      type: "string",
      nullable: true
    },
    templateArguments: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const AuthenticatePasswordRequestSchema = {
  required: ["password", "username"],
  type: "object",
  properties: {
    password: {
      minLength: 1,
      type: "string"
    },
    username: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const AuthenticateResponseSchema = {
  type: "object",
  properties: {
    tokens: {
      $ref: "#/components/schemas/AuthenticateTokens"
    }
  },
  additionalProperties: false
} as const;

export const AuthenticateSingleSignOnRequestSchema = {
  required: ["authCode", "provider"],
  type: "object",
  properties: {
    authCode: {
      minLength: 1,
      type: "string"
    },
    invitationToken: {
      type: "string",
      nullable: true
    },
    provider: {
      minLength: 1,
      type: "string"
    },
    username: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const AuthenticateTokensSchema = {
  type: "object",
  properties: {
    accessToken: {
      $ref: "#/components/schemas/AuthenticationToken"
    },
    refreshToken: {
      $ref: "#/components/schemas/AuthenticationToken"
    },
    userId: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const AuthenticationTokenSchema = {
  type: "object",
  properties: {
    expiresOn: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    type: {
      $ref: "#/components/schemas/TokenType"
    },
    value: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const BookingSchema = {
  type: "object",
  properties: {
    borrowerId: {
      type: "string",
      nullable: true
    },
    carId: {
      type: "string",
      nullable: true
    },
    endUtc: {
      type: "string",
      format: "date-time"
    },
    startUtc: {
      type: "string",
      format: "date-time"
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const CarSchema = {
  type: "object",
  properties: {
    managers: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CarManager"
      },
      nullable: true
    },
    manufacturer: {
      $ref: "#/components/schemas/CarManufacturer"
    },
    owner: {
      $ref: "#/components/schemas/CarOwner"
    },
    plate: {
      $ref: "#/components/schemas/CarLicensePlate"
    },
    status: {
      type: "string",
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const CarLicensePlateSchema = {
  type: "object",
  properties: {
    jurisdiction: {
      type: "string",
      nullable: true
    },
    number: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const CarManagerSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const CarManufacturerSchema = {
  type: "object",
  properties: {
    make: {
      type: "string",
      nullable: true
    },
    model: {
      type: "string",
      nullable: true
    },
    year: {
      type: "integer",
      format: "int32"
    }
  },
  additionalProperties: false
} as const;

export const CarOwnerSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ChangeDefaultOrganizationRequestSchema = {
  required: ["organizationId"],
  type: "object",
  properties: {
    organizationId: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ChangeOrganizationRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    name: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ChangeProfileAvatarResponseSchema = {
  type: "object",
  properties: {
    profile: {
      $ref: "#/components/schemas/UserProfile"
    }
  },
  additionalProperties: false
} as const;

export const ChangeProfileContactAddressRequestSchema = {
  required: ["userId"],
  type: "object",
  properties: {
    city: {
      type: "string",
      nullable: true
    },
    countryCode: {
      type: "string",
      nullable: true
    },
    line1: {
      type: "string",
      nullable: true
    },
    line2: {
      type: "string",
      nullable: true
    },
    line3: {
      type: "string",
      nullable: true
    },
    state: {
      type: "string",
      nullable: true
    },
    zip: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ChangeProfileRequestSchema = {
  required: ["userId"],
  type: "object",
  properties: {
    displayName: {
      type: "string",
      nullable: true
    },
    firstName: {
      type: "string",
      nullable: true
    },
    lastName: {
      type: "string",
      nullable: true
    },
    phoneNumber: {
      type: "string",
      nullable: true
    },
    timezone: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ChangeSubscriptionPlanRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    planId: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const CompletePasswordResetRequestSchema = {
  required: ["password", "token"],
  type: "object",
  properties: {
    password: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ConfirmEmailDeliveredRequestSchema = {
  required: ["receiptId"],
  type: "object",
  properties: {
    deliveredAtUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    receiptId: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ConfirmEmailDeliveryFailedRequestSchema = {
  required: ["receiptId"],
  type: "object",
  properties: {
    failedAtUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    reason: {
      type: "string",
      nullable: true
    },
    receiptId: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ConfirmRegistrationPersonPasswordRequestSchema = {
  required: ["token"],
  type: "object",
  properties: {
    token: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const ConfirmRegistrationPersonPasswordResponseSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const CreateAPIKeyForCallerRequestSchema = {
  type: "object",
  properties: {
    expiresOnUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const CreateAPIKeyResponseSchema = {
  type: "object",
  properties: {
    apiKey: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const CreateOrganizationRequestSchema = {
  required: ["name"],
  type: "object",
  properties: {
    name: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const CustomDtoSchema = {
  type: "object",
  properties: {
    double: {
      type: "number",
      format: "double",
      nullable: true
    },
    enum: {
      $ref: "#/components/schemas/CustomEnum"
    },
    integer: {
      type: "integer",
      format: "int32",
      nullable: true
    },
    string: {
      type: "string",
      nullable: true
    },
    time: {
      type: "string",
      format: "date-time",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const CustomEnumSchema = {
  enum: ["One", "TwentyOne", "OneHundredAndOne"],
  type: "string"
} as const;

export const DeleteProfileAvatarResponseSchema = {
  type: "object",
  properties: {
    profile: {
      $ref: "#/components/schemas/UserProfile"
    }
  },
  additionalProperties: false
} as const;

export const DeliverAuditRequestSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const DeliverMessageResponseSchema = {
  type: "object",
  properties: {
    isSent: {
      type: "boolean"
    }
  },
  additionalProperties: false
} as const;

export const DeliverUsageRequestSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const DeliveredEmailSchema = {
  type: "object",
  properties: {
    attempts: {
      type: "array",
      items: {
        type: "string",
        format: "date-time"
      },
      nullable: true
    },
    body: {
      type: "string",
      nullable: true
    },
    deliveredAt: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    failedDeliveryAt: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    failedDeliveryReason: {
      type: "string",
      nullable: true
    },
    isDelivered: {
      type: "boolean"
    },
    isDeliveryFailed: {
      type: "boolean"
    },
    isSent: {
      type: "boolean"
    },
    sentAt: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    subject: {
      type: "string",
      nullable: true
    },
    toDisplayName: {
      type: "string",
      nullable: true
    },
    toEmailAddress: {
      type: "string",
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const DestroyAllRepositoriesRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const DomainEventSchema = {
  type: "object",
  properties: {
    data: {
      type: "string",
      nullable: true
    },
    eventType: {
      type: "string",
      nullable: true
    },
    metadataFullyQualifiedName: {
      type: "string",
      nullable: true
    },
    rootAggregateType: {
      type: "string",
      nullable: true
    },
    streamName: {
      type: "string",
      nullable: true
    },
    version: {
      type: "integer",
      format: "int32"
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const DrainAllAuditsRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const DrainAllDomainEventsRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const DrainAllEmailsRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const DrainAllProvisioningsRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const DrainAllUsagesRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const EmptyResponseSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const EndUserSchema = {
  type: "object",
  properties: {
    access: {
      $ref: "#/components/schemas/EndUserAccess"
    },
    classification: {
      $ref: "#/components/schemas/EndUserClassification"
    },
    features: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    roles: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    status: {
      $ref: "#/components/schemas/EndUserStatus"
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const EndUserAccessSchema = {
  enum: ["Enabled", "Suspended"],
  type: "string"
} as const;

export const EndUserClassificationSchema = {
  enum: ["Person", "Machine"],
  type: "string"
} as const;

export const EndUserStatusSchema = {
  enum: ["Unregistered", "Registered"],
  type: "string"
} as const;

export const EndUserWithMembershipsSchema = {
  type: "object",
  properties: {
    access: {
      $ref: "#/components/schemas/EndUserAccess"
    },
    classification: {
      $ref: "#/components/schemas/EndUserClassification"
    },
    features: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    roles: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    status: {
      $ref: "#/components/schemas/EndUserStatus"
    },
    id: {
      type: "string",
      nullable: true
    },
    memberships: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Membership"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ExportSubscriptionsToMigrateResponseSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    subscriptions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SubscriptionToMigrate"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const FeatureFlagSchema = {
  type: "object",
  properties: {
    isEnabled: {
      type: "boolean"
    },
    name: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const FilteringSchema = {
  type: "object",
  properties: {
    fields: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true,
      readOnly: true
    }
  },
  additionalProperties: false
} as const;

export const FormatsTestingOnlyRequestSchema = {
  type: "object",
  properties: {
    custom: {
      $ref: "#/components/schemas/CustomDto"
    },
    double: {
      type: "number",
      format: "double",
      nullable: true
    },
    enum: {
      $ref: "#/components/schemas/CustomEnum"
    },
    integer: {
      type: "integer",
      format: "int32",
      nullable: true
    },
    string: {
      type: "string",
      nullable: true
    },
    time: {
      type: "string",
      format: "date-time",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const FormatsTestingOnlyResponseSchema = {
  type: "object",
  properties: {
    custom: {
      $ref: "#/components/schemas/CustomDto"
    },
    double: {
      type: "number",
      format: "double",
      nullable: true
    },
    enum: {
      $ref: "#/components/schemas/CustomEnum"
    },
    integer: {
      type: "integer",
      format: "int32",
      nullable: true
    },
    string: {
      type: "string",
      nullable: true
    },
    time: {
      type: "string",
      format: "date-time",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const GetAllFeatureFlagsResponseSchema = {
  type: "object",
  properties: {
    flags: {
      type: "array",
      items: {
        $ref: "#/components/schemas/FeatureFlag"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const GetCallerTestingOnlyResponseSchema = {
  type: "object",
  properties: {
    callerId: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const GetCarResponseSchema = {
  type: "object",
  properties: {
    car: {
      $ref: "#/components/schemas/Car"
    }
  },
  additionalProperties: false
} as const;

export const GetFeatureFlagResponseSchema = {
  type: "object",
  properties: {
    flag: {
      $ref: "#/components/schemas/FeatureFlag"
    }
  },
  additionalProperties: false
} as const;

export const GetImageResponseSchema = {
  type: "object",
  properties: {
    image: {
      $ref: "#/components/schemas/Image"
    }
  },
  additionalProperties: false
} as const;

export const GetOrganizationResponseSchema = {
  type: "object",
  properties: {
    organization: {
      $ref: "#/components/schemas/Organization"
    }
  },
  additionalProperties: false
} as const;

export const GetOrganizationSettingsResponseSchema = {
  type: "object",
  properties: {
    organization: {
      $ref: "#/components/schemas/Organization"
    },
    settings: {
      type: "object",
      additionalProperties: {
        type: "string"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const GetProfileForCallerResponseSchema = {
  type: "object",
  properties: {
    profile: {
      $ref: "#/components/schemas/UserProfileForCaller"
    }
  },
  additionalProperties: false
} as const;

export const GetProfileResponseSchema = {
  type: "object",
  properties: {
    profile: {
      $ref: "#/components/schemas/UserProfile"
    }
  },
  additionalProperties: false
} as const;

export const GetRegistrationPersonConfirmationResponseSchema = {
  type: "object",
  properties: {
    token: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const GetSubscriptionResponseSchema = {
  type: "object",
  properties: {
    subscription: {
      $ref: "#/components/schemas/SubscriptionWithPlan"
    }
  },
  additionalProperties: false
} as const;

export const GetUserResponseSchema = {
  type: "object",
  properties: {
    user: {
      $ref: "#/components/schemas/EndUserWithMemberships"
    }
  },
  additionalProperties: false
} as const;

export const HealthCheckResponseSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      nullable: true
    },
    status: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ImageSchema = {
  type: "object",
  properties: {
    contentType: {
      type: "string",
      nullable: true
    },
    description: {
      type: "string",
      nullable: true
    },
    filename: {
      type: "string",
      nullable: true
    },
    url: {
      type: "string",
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const InitiatePasswordResetRequestSchema = {
  required: ["emailAddress"],
  type: "object",
  properties: {
    emailAddress: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const InvitationSchema = {
  type: "object",
  properties: {
    emailAddress: {
      type: "string",
      nullable: true
    },
    firstName: {
      type: "string",
      nullable: true
    },
    lastName: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const InviteGuestRequestSchema = {
  required: ["email"],
  type: "object",
  properties: {
    email: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const InviteGuestResponseSchema = {
  type: "object",
  properties: {
    invitation: {
      $ref: "#/components/schemas/Invitation"
    }
  },
  additionalProperties: false
} as const;

export const InviteMemberToOrganizationRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    email: {
      type: "string",
      nullable: true
    },
    userId: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const InviteMemberToOrganizationResponseSchema = {
  type: "object",
  properties: {
    organization: {
      $ref: "#/components/schemas/Organization"
    }
  },
  additionalProperties: false
} as const;

export const InvoiceSchema = {
  type: "object",
  properties: {
    amount: {
      type: "number",
      format: "double",
      nullable: true
    },
    currency: {
      type: "string",
      nullable: true
    },
    includesTax: {
      type: "boolean"
    },
    invoicedOnUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    lineItems: {
      type: "array",
      items: {
        $ref: "#/components/schemas/InvoiceLineItem"
      },
      nullable: true
    },
    notes: {
      type: "array",
      items: {
        $ref: "#/components/schemas/InvoiceNote"
      },
      nullable: true
    },
    payment: {
      $ref: "#/components/schemas/InvoiceItemPayment"
    },
    periodEndUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    periodStartUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    status: {
      $ref: "#/components/schemas/InvoiceStatus"
    },
    taxAmount: {
      type: "number",
      format: "double",
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const InvoiceItemPaymentSchema = {
  type: "object",
  properties: {
    amount: {
      type: "number",
      format: "double",
      nullable: true
    },
    currency: {
      type: "string",
      nullable: true
    },
    paidOnUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    reference: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const InvoiceLineItemSchema = {
  type: "object",
  properties: {
    amount: {
      type: "number",
      format: "double",
      nullable: true
    },
    currency: {
      type: "string",
      nullable: true
    },
    description: {
      type: "string",
      nullable: true
    },
    isTaxed: {
      type: "boolean"
    },
    reference: {
      type: "string",
      nullable: true
    },
    taxAmount: {
      type: "number",
      format: "double",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const InvoiceNoteSchema = {
  type: "object",
  properties: {
    description: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const InvoiceStatusSchema = {
  enum: ["Unpaid", "Paid"],
  type: "string"
} as const;

export const InvoiceSummarySchema = {
  type: "object",
  properties: {
    amount: {
      type: "number",
      format: "double"
    },
    currency: {
      type: "string",
      nullable: true
    },
    nextUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ListMembersForOrganizationResponseSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    members: {
      type: "array",
      items: {
        $ref: "#/components/schemas/OrganizationMember"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ListMembershipsForCallerResponseSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    memberships: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Membership"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ListPricingPlansResponseSchema = {
  type: "object",
  properties: {
    plans: {
      $ref: "#/components/schemas/PricingPlans"
    }
  },
  additionalProperties: false
} as const;

export const MachineCredentialSchema = {
  type: "object",
  properties: {
    apiKey: {
      type: "string",
      nullable: true
    },
    createdById: {
      type: "string",
      nullable: true
    },
    description: {
      type: "string",
      nullable: true
    },
    expiresOnUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const MailgunDeliveryStatusSchema = {
  type: "object",
  properties: {
    description: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const MailgunEventDataSchema = {
  type: "object",
  properties: {
    "delivery-status": {
      $ref: "#/components/schemas/MailgunDeliveryStatus"
    },
    event: {
      type: "string",
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    },
    message: {
      $ref: "#/components/schemas/MailgunMessage"
    },
    reason: {
      type: "string",
      nullable: true
    },
    severity: {
      type: "string",
      nullable: true
    },
    timestamp: {
      type: "number",
      format: "double",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const MailgunMessageSchema = {
  type: "object",
  properties: {
    headers: {
      $ref: "#/components/schemas/MailgunMessageHeaders"
    }
  },
  additionalProperties: false
} as const;

export const MailgunMessageHeadersSchema = {
  type: "object",
  properties: {
    from: {
      type: "string",
      nullable: true
    },
    "message-id": {
      type: "string",
      nullable: true
    },
    subject: {
      type: "string",
      nullable: true
    },
    to: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const MailgunNotifyWebhookEventRequestSchema = {
  type: "object",
  properties: {
    "event-data": {
      $ref: "#/components/schemas/MailgunEventData"
    },
    signature: {
      $ref: "#/components/schemas/MailgunSignature"
    }
  },
  additionalProperties: false
} as const;

export const MailgunSignatureSchema = {
  type: "object",
  properties: {
    signature: {
      type: "string",
      nullable: true
    },
    timestamp: {
      type: "string",
      nullable: true
    },
    token: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const MakeBookingRequestSchema = {
  required: ["carId", "startUtc"],
  type: "object",
  properties: {
    organizationId: {
      type: "string",
      description:
        "An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used",
      nullable: true
    },
    carId: {
      minLength: 1,
      type: "string"
    },
    endUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    startUtc: {
      type: "string",
      format: "date-time"
    }
  },
  additionalProperties: false
} as const;

export const MakeBookingResponseSchema = {
  type: "object",
  properties: {
    booking: {
      $ref: "#/components/schemas/Booking"
    }
  },
  additionalProperties: false
} as const;

export const MembershipSchema = {
  type: "object",
  properties: {
    features: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    isDefault: {
      type: "boolean"
    },
    organizationId: {
      type: "string",
      nullable: true
    },
    ownership: {
      $ref: "#/components/schemas/OrganizationOwnership"
    },
    roles: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    userId: {
      type: "string",
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const MigrateSubscriptionRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    providerName: {
      type: "string",
      nullable: true
    },
    providerState: {
      type: "object",
      additionalProperties: {
        type: "string",
        nullable: true
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const MigrateSubscriptionResponseSchema = {
  type: "object",
  properties: {
    subscription: {
      $ref: "#/components/schemas/Subscription"
    }
  },
  additionalProperties: false
} as const;

export const NotifyDomainEventRequestSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const NotifyProvisioningRequestSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const OpenApiPostTestingOnlyRequestSchema = {
  required: ["id", "requiredField"],
  type: "object",
  properties: {
    optionalField: {
      type: "string",
      description: "anoptionalfield",
      nullable: true
    },
    requiredField: {
      minLength: 1,
      type: "string",
      description: "arequiredfield"
    }
  },
  additionalProperties: false
} as const;

export const OpenApiPutTestingOnlyRequestSchema = {
  required: ["id", "requiredField"],
  type: "object",
  properties: {
    optionalField: {
      type: "string",
      description: "anoptionalfield",
      nullable: true
    },
    requiredField: {
      minLength: 1,
      type: "string",
      description: "arequiredfield"
    }
  },
  additionalProperties: false
} as const;

export const OrganizationSchema = {
  type: "object",
  properties: {
    avatarUrl: {
      type: "string",
      nullable: true
    },
    createdById: {
      type: "string",
      nullable: true
    },
    name: {
      type: "string",
      nullable: true
    },
    ownership: {
      $ref: "#/components/schemas/OrganizationOwnership"
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const OrganizationMemberSchema = {
  type: "object",
  properties: {
    classification: {
      $ref: "#/components/schemas/UserProfileClassification"
    },
    emailAddress: {
      type: "string",
      nullable: true
    },
    features: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    isDefault: {
      type: "boolean"
    },
    isOwner: {
      type: "boolean"
    },
    isRegistered: {
      type: "boolean"
    },
    name: {
      $ref: "#/components/schemas/PersonName"
    },
    roles: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    userId: {
      type: "string",
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const OrganizationOwnershipSchema = {
  enum: ["Shared", "Personal"],
  type: "string"
} as const;

export const PasswordCredentialSchema = {
  type: "object",
  properties: {
    user: {
      $ref: "#/components/schemas/EndUser"
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const PaymentMethodStatusSchema = {
  enum: ["Invalid", "Valid"],
  type: "string"
} as const;

export const PaymentMethodTypeSchema = {
  enum: ["None", "Card", "Other"],
  type: "string"
} as const;

export const PeriodFrequencyUnitSchema = {
  enum: ["Eternity", "Day", "Week", "Month", "Year"],
  type: "string"
} as const;

export const PersonNameSchema = {
  type: "object",
  properties: {
    firstName: {
      type: "string",
      nullable: true
    },
    lastName: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const PlanPeriodSchema = {
  type: "object",
  properties: {
    frequency: {
      type: "integer",
      format: "int32"
    },
    unit: {
      $ref: "#/components/schemas/PeriodFrequencyUnit"
    }
  },
  additionalProperties: false
} as const;

export const PostInsecureTestingOnlyRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const PostWithEmptyBodyTestingOnlyRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const PostWithEnumTestingOnlyRequestSchema = {
  type: "object",
  properties: {
    anEnum: {
      $ref: "#/components/schemas/TestEnum"
    },
    aProperty: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const PostWithRouteParamsAndEmptyBodyTestingOnlyRequestSchema = {
  required: ["aNumberProperty", "aStringProperty"],
  type: "object",
  additionalProperties: false
} as const;

export const PricingFeatureItemSchema = {
  type: "object",
  properties: {
    description: {
      type: "string",
      nullable: true
    },
    isIncluded: {
      type: "boolean"
    }
  },
  additionalProperties: false
} as const;

export const PricingFeatureSectionSchema = {
  type: "object",
  properties: {
    description: {
      type: "string",
      nullable: true
    },
    features: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingFeatureItem"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const PricingPlanSchema = {
  type: "object",
  properties: {
    cost: {
      type: "number",
      format: "double"
    },
    currency: {
      type: "string",
      nullable: true
    },
    description: {
      type: "string",
      nullable: true
    },
    displayName: {
      type: "string",
      nullable: true
    },
    featureSection: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingFeatureSection"
      },
      nullable: true
    },
    isRecommended: {
      type: "boolean"
    },
    notes: {
      type: "string",
      nullable: true
    },
    period: {
      $ref: "#/components/schemas/PlanPeriod"
    },
    setupCost: {
      type: "number",
      format: "double"
    },
    trial: {
      $ref: "#/components/schemas/SubscriptionTrialPeriod"
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const PricingPlansSchema = {
  type: "object",
  properties: {
    annually: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingPlan"
      },
      nullable: true
    },
    daily: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingPlan"
      },
      nullable: true
    },
    eternally: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingPlan"
      },
      nullable: true
    },
    monthly: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingPlan"
      },
      nullable: true
    },
    weekly: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PricingPlan"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ProblemDetailsSchema = {
  type: "object",
  properties: {
    type: {
      type: "string",
      nullable: true
    },
    title: {
      type: "string",
      nullable: true
    },
    status: {
      type: "integer",
      format: "int32",
      nullable: true
    },
    detail: {
      type: "string",
      nullable: true
    },
    instance: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: {}
} as const;

export const ProfileAddressSchema = {
  type: "object",
  properties: {
    city: {
      type: "string",
      nullable: true
    },
    countryCode: {
      type: "string",
      nullable: true
    },
    line1: {
      type: "string",
      nullable: true
    },
    line2: {
      type: "string",
      nullable: true
    },
    line3: {
      type: "string",
      nullable: true
    },
    state: {
      type: "string",
      nullable: true
    },
    zip: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const RecordMeasureRequestSchema = {
  required: ["eventName"],
  type: "object",
  properties: {
    additional: {
      type: "object",
      additionalProperties: {
        nullable: true
      },
      nullable: true
    },
    eventName: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const RecordUseRequestSchema = {
  required: ["eventName"],
  type: "object",
  properties: {
    additional: {
      type: "object",
      additionalProperties: {
        nullable: true
      },
      nullable: true
    },
    eventName: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const RefreshTokenRequestSchema = {
  required: ["refreshToken"],
  type: "object",
  properties: {
    refreshToken: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const RefreshTokenResponseSchema = {
  type: "object",
  properties: {
    tokens: {
      $ref: "#/components/schemas/AuthenticateTokens"
    }
  },
  additionalProperties: false
} as const;

export const RegisterCarRequestSchema = {
  required: ["jurisdiction", "make", "model", "numberPlate", "year"],
  type: "object",
  properties: {
    organizationId: {
      type: "string",
      description:
        "An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used",
      nullable: true
    },
    jurisdiction: {
      minLength: 1,
      type: "string"
    },
    make: {
      minLength: 1,
      type: "string"
    },
    model: {
      minLength: 1,
      type: "string"
    },
    numberPlate: {
      minLength: 1,
      type: "string"
    },
    year: {
      type: "integer",
      format: "int32"
    }
  },
  additionalProperties: false
} as const;

export const RegisterMachineRequestSchema = {
  required: ["name"],
  type: "object",
  properties: {
    apiKeyExpiresOnUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    countryCode: {
      type: "string",
      nullable: true
    },
    name: {
      minLength: 1,
      type: "string"
    },
    timezone: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const RegisterMachineResponseSchema = {
  type: "object",
  properties: {
    machine: {
      $ref: "#/components/schemas/MachineCredential"
    }
  },
  additionalProperties: false
} as const;

export const RegisterPersonPasswordRequestSchema = {
  required: ["emailAddress", "firstName", "lastName", "password"],
  type: "object",
  properties: {
    countryCode: {
      type: "string",
      nullable: true
    },
    emailAddress: {
      minLength: 1,
      type: "string"
    },
    firstName: {
      minLength: 1,
      type: "string"
    },
    invitationToken: {
      type: "string",
      nullable: true
    },
    lastName: {
      minLength: 1,
      type: "string"
    },
    password: {
      minLength: 1,
      type: "string"
    },
    termsAndConditionsAccepted: {
      type: "boolean"
    },
    timezone: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const RegisterPersonPasswordResponseSchema = {
  type: "object",
  properties: {
    credential: {
      $ref: "#/components/schemas/PasswordCredential"
    }
  },
  additionalProperties: false
} as const;

export const ResendGuestInvitationRequestSchema = {
  required: ["token"],
  type: "object",
  additionalProperties: false
} as const;

export const ResendPasswordResetRequestSchema = {
  required: ["token"],
  type: "object",
  additionalProperties: false
} as const;

export const ScheduleMaintenanceCarRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    organizationId: {
      type: "string",
      description:
        "An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used",
      nullable: true
    },
    fromUtc: {
      type: "string",
      format: "date-time"
    },
    toUtc: {
      type: "string",
      format: "date-time"
    }
  },
  additionalProperties: false
} as const;

export const SearchAllAPIKeysResponseSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    keys: {
      type: "array",
      items: {
        $ref: "#/components/schemas/APIKey"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const SearchAllAuditsResponseSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    audits: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Audit"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const SearchAllBookingsResponseSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    bookings: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Booking"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const SearchAllCarUnavailabilitiesResponseSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    unavailabilities: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Unavailability"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const SearchAllCarsResponseSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    cars: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Car"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const SearchAllDomainEventsResponseSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    events: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DomainEvent"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const SearchEmailDeliveriesResponseSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    emails: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DeliveredEmail"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const SearchResultMetadataSchema = {
  type: "object",
  properties: {
    filter: {
      $ref: "#/components/schemas/Filtering"
    },
    limit: {
      type: "integer",
      format: "int32"
    },
    offset: {
      type: "integer",
      format: "int32"
    },
    sort: {
      $ref: "#/components/schemas/Sorting"
    },
    total: {
      type: "integer",
      format: "int32"
    }
  },
  additionalProperties: false
} as const;

export const SearchSubscriptionHistoryResponseSchema = {
  type: "object",
  properties: {
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    },
    invoices: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Invoice"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const SendEmailRequestSchema = {
  required: ["message"],
  type: "object",
  properties: {
    message: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const SortDirectionSchema = {
  enum: ["Ascending", "Descending"],
  type: "string"
} as const;

export const SortingSchema = {
  type: "object",
  properties: {
    by: {
      type: "string",
      nullable: true
    },
    direction: {
      $ref: "#/components/schemas/SortDirection"
    }
  },
  additionalProperties: false
} as const;

export const StatusesPostTestingOnlyRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const StatusesPostWithLocationTestingOnlyRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const StatusesPutPatchTestingOnlyRequestSchema = {
  type: "object",
  additionalProperties: false
} as const;

export const StatusesTestingOnlyResponseSchema = {
  type: "object",
  properties: {
    message: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const StatusesTestingOnlySearchResponseSchema = {
  type: "object",
  properties: {
    messages: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    metadata: {
      $ref: "#/components/schemas/SearchResultMetadata"
    }
  },
  additionalProperties: false
} as const;

export const StringMessageTestingOnlyResponseSchema = {
  type: "object",
  properties: {
    message: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const SubscriptionSchema = {
  type: "object",
  properties: {
    buyerId: {
      type: "string",
      nullable: true
    },
    owningEntityId: {
      type: "string",
      nullable: true
    },
    providerName: {
      type: "string",
      nullable: true
    },
    providerState: {
      type: "object",
      additionalProperties: {
        type: "string"
      },
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const SubscriptionPaymentMethodSchema = {
  type: "object",
  properties: {
    expiresOn: {
      type: "string",
      format: "date",
      nullable: true
    },
    status: {
      $ref: "#/components/schemas/PaymentMethodStatus"
    },
    type: {
      $ref: "#/components/schemas/PaymentMethodType"
    }
  },
  additionalProperties: false
} as const;

export const SubscriptionPlanSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      nullable: true
    },
    isTrial: {
      type: "boolean"
    },
    tier: {
      $ref: "#/components/schemas/SubscriptionTier"
    },
    trialEndDateUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const SubscriptionStatusSchema = {
  enum: ["Unsubscribed", "Activated", "Canceled", "Canceling"],
  type: "string"
} as const;

export const SubscriptionTierSchema = {
  enum: ["Unsubscribed", "Standard", "Professional", "Enterprise"],
  type: "string"
} as const;

export const SubscriptionToMigrateSchema = {
  type: "object",
  properties: {
    buyerId: {
      type: "string",
      nullable: true
    },
    owningEntityId: {
      type: "string",
      nullable: true
    },
    providerName: {
      type: "string",
      nullable: true
    },
    providerState: {
      type: "object",
      additionalProperties: {
        type: "string"
      },
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    },
    buyer: {
      type: "object",
      additionalProperties: {
        type: "string"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const SubscriptionTrialPeriodSchema = {
  type: "object",
  properties: {
    frequency: {
      type: "integer",
      format: "int32"
    },
    hasTrial: {
      type: "boolean"
    },
    unit: {
      $ref: "#/components/schemas/PeriodFrequencyUnit"
    }
  },
  additionalProperties: false
} as const;

export const SubscriptionWithPlanSchema = {
  type: "object",
  properties: {
    buyerId: {
      type: "string",
      nullable: true
    },
    owningEntityId: {
      type: "string",
      nullable: true
    },
    providerName: {
      type: "string",
      nullable: true
    },
    providerState: {
      type: "object",
      additionalProperties: {
        type: "string"
      },
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    },
    canBeCanceled: {
      type: "boolean"
    },
    canBeUnsubscribed: {
      type: "boolean"
    },
    canceledDateUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    invoice: {
      $ref: "#/components/schemas/InvoiceSummary"
    },
    paymentMethod: {
      $ref: "#/components/schemas/SubscriptionPaymentMethod"
    },
    period: {
      $ref: "#/components/schemas/PlanPeriod"
    },
    plan: {
      $ref: "#/components/schemas/SubscriptionPlan"
    },
    status: {
      $ref: "#/components/schemas/SubscriptionStatus"
    },
    subscriptionReference: {
      type: "string",
      nullable: true
    },
    buyerReference: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const TakeOfflineCarRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    organizationId: {
      type: "string",
      description:
        "An ID of the Organization. If not provided, the ID of the default organization of the authenticated user (if any) is used",
      nullable: true
    },
    fromUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    },
    toUtc: {
      type: "string",
      format: "date-time",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const TestEnumSchema = {
  enum: ["Value1", "Value2", "Value3"],
  type: "string"
} as const;

export const TokenTypeSchema = {
  enum: ["OtherToken", "AccessToken", "RefreshToken"],
  type: "string"
} as const;

export const TransferSubscriptionRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    userId: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const UnInviteMemberFromOrganizationResponseSchema = {
  type: "object",
  properties: {
    organization: {
      $ref: "#/components/schemas/Organization"
    }
  },
  additionalProperties: false
} as const;

export const UnassignPlatformRolesRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    roles: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const UnassignRolesFromOrganizationRequestSchema = {
  required: ["id", "userId"],
  type: "object",
  properties: {
    roles: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    userId: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const UnavailabilitySchema = {
  type: "object",
  properties: {
    carId: {
      type: "string",
      nullable: true
    },
    causedByReason: {
      type: "string",
      nullable: true
    },
    causedByReference: {
      type: "string",
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const UpdateImageRequestSchema = {
  required: ["id"],
  type: "object",
  properties: {
    description: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const UpdateImageResponseSchema = {
  type: "object",
  properties: {
    image: {
      $ref: "#/components/schemas/Image"
    }
  },
  additionalProperties: false
} as const;

export const UpdateUserResponseSchema = {
  type: "object",
  properties: {
    user: {
      $ref: "#/components/schemas/EndUser"
    }
  },
  additionalProperties: false
} as const;

export const UploadImageResponseSchema = {
  type: "object",
  properties: {
    image: {
      $ref: "#/components/schemas/Image"
    }
  },
  additionalProperties: false
} as const;

export const UserProfileSchema = {
  type: "object",
  properties: {
    address: {
      $ref: "#/components/schemas/ProfileAddress"
    },
    avatarUrl: {
      type: "string",
      nullable: true
    },
    classification: {
      $ref: "#/components/schemas/UserProfileClassification"
    },
    displayName: {
      type: "string",
      nullable: true
    },
    emailAddress: {
      type: "string",
      nullable: true
    },
    name: {
      $ref: "#/components/schemas/PersonName"
    },
    phoneNumber: {
      type: "string",
      nullable: true
    },
    timezone: {
      type: "string",
      nullable: true
    },
    userId: {
      type: "string",
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const UserProfileClassificationSchema = {
  enum: ["Person", "Machine"],
  type: "string"
} as const;

export const UserProfileForCallerSchema = {
  type: "object",
  properties: {
    address: {
      $ref: "#/components/schemas/ProfileAddress"
    },
    avatarUrl: {
      type: "string",
      nullable: true
    },
    classification: {
      $ref: "#/components/schemas/UserProfileClassification"
    },
    displayName: {
      type: "string",
      nullable: true
    },
    emailAddress: {
      type: "string",
      nullable: true
    },
    name: {
      $ref: "#/components/schemas/PersonName"
    },
    phoneNumber: {
      type: "string",
      nullable: true
    },
    timezone: {
      type: "string",
      nullable: true
    },
    userId: {
      type: "string",
      nullable: true
    },
    id: {
      type: "string",
      nullable: true
    },
    defaultOrganizationId: {
      type: "string",
      nullable: true
    },
    features: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    },
    isAuthenticated: {
      type: "boolean"
    },
    roles: {
      type: "array",
      items: {
        type: "string"
      },
      nullable: true
    }
  },
  additionalProperties: false
} as const;

export const ValidationsValidatedPostTestingOnlyRequestSchema = {
  required: ["id", "requiredField"],
  type: "object",
  properties: {
    optionalField: {
      type: "string",
      nullable: true
    },
    requiredField: {
      minLength: 1,
      type: "string"
    }
  },
  additionalProperties: false
} as const;

export const VerifyGuestInvitationResponseSchema = {
  type: "object",
  properties: {
    invitation: {
      $ref: "#/components/schemas/Invitation"
    }
  },
  additionalProperties: false
} as const;

export const VoidSchema = {
  type: "object",
  additionalProperties: false
} as const;
