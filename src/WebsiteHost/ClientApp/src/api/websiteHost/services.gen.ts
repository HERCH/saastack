// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-axios";
import type {
  AuthenticateData,
  AuthenticateError,
  AuthenticateResponse2,
  GetAllFeatureFlagsError,
  GetAllFeatureFlagsResponse2,
  GetErrorError,
  GetErrorResponse,
  GetFeatureFlagForCallerData,
  GetFeatureFlagForCallerError,
  GetFeatureFlagForCallerResponse,
  HealthCheckError,
  HealthCheckResponse2,
  LogoutData,
  LogoutError,
  LogoutResponse,
  RecordCrashData,
  RecordCrashError,
  RecordCrashResponse,
  RecordMeasureData,
  RecordMeasureError,
  RecordMeasureResponse,
  RecordPageViewData,
  RecordPageViewError,
  RecordPageViewResponse,
  RecordTraceData,
  RecordTraceError,
  RecordTraceResponse,
  RecordUseData,
  RecordUseError,
  RecordUseResponse,
  RefreshTokenData,
  RefreshTokenError,
  RefreshTokenResponse
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Authenticates the user with the specified provider, using either an auth code or a username and password.
 * (request type: AuthenticateRequest)
 */
export const authenticate = <ThrowOnError extends boolean = false>(options?: Options<AuthenticateData, ThrowOnError>) =>
  (options?.client ?? client).post<AuthenticateResponse2, AuthenticateError, ThrowOnError>({
    ...options,
    url: "/api/auth"
  });

/**
 * Removes the current user's authenticated session (if any)
 * (request type: LogoutRequest)
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) =>
  (options?.client ?? client).post<LogoutResponse, LogoutError, ThrowOnError>({
    ...options,
    url: "/api/auth/logout"
  });

/**
 * Refreshes the current user's authentication session (if possible)
 * (request type: RefreshTokenRequest)
 */
export const refreshToken = <ThrowOnError extends boolean = false>(options?: Options<RefreshTokenData, ThrowOnError>) =>
  (options?.client ?? client).post<RefreshTokenResponse, RefreshTokenError, ThrowOnError>({
    ...options,
    url: "/api/auth/refresh"
  });

/**
 * Lists all the available feature flags
 * (request type: GetAllFeatureFlagsRequest)
 */
export const getAllFeatureFlags = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<GetAllFeatureFlagsResponse2, GetAllFeatureFlagsError, ThrowOnError>({
    ...options,
    url: "/api/flags"
  });

/**
 * Fetches the named feature flag for the current authenticated user
 * (request type: GetFeatureFlagForCallerRequest)
 */
export const getFeatureFlagForCaller = <ThrowOnError extends boolean = false>(
  options: Options<GetFeatureFlagForCallerData, ThrowOnError>
) =>
  (options?.client ?? client).get<GetFeatureFlagForCallerResponse, GetFeatureFlagForCallerError, ThrowOnError>({
    ...options,
    url: "/api/flags/{Name}"
  });

/**
 * Displays the health of the API
 * (request type: HealthCheckRequest)
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<HealthCheckResponse2, HealthCheckError, ThrowOnError>({
    ...options,
    url: "/api/health"
  });

export const getError = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) =>
  (options?.client ?? client).get<GetErrorResponse, GetErrorError, ThrowOnError>({
    ...options,
    url: "/error"
  });

/**
 * Records a crash event of the product
 * (request type: RecordCrashRequest)
 */
export const recordCrash = <ThrowOnError extends boolean = false>(options?: Options<RecordCrashData, ThrowOnError>) =>
  (options?.client ?? client).post<RecordCrashResponse, RecordCrashError, ThrowOnError>({
    ...options,
    url: "/api/record/crash"
  });

/**
 * Measures an event in the product
 * (request type: RecordMeasureRequest)
 */
export const recordMeasure = <ThrowOnError extends boolean = false>(
  options?: Options<RecordMeasureData, ThrowOnError>
) =>
  (options?.client ?? client).post<RecordMeasureResponse, RecordMeasureError, ThrowOnError>({
    ...options,
    url: "/api/record/measure"
  });

/**
 * Records a page view event in the product
 * (request type: RecordPageViewRequest)
 */
export const recordPageView = <ThrowOnError extends boolean = false>(options?: Options<RecordPageViewData, ThrowOnError>) =>
  (options?.client ?? client).post<RecordPageViewResponse, RecordPageViewError, ThrowOnError>({
    ...options,
    url: "/api/record/page_view"
  });

/**
 * Records a trace event in the product
 * (request type: RecordTraceRequest)
 */
export const recordTrace = <ThrowOnError extends boolean = false>(options?: Options<RecordTraceData, ThrowOnError>) =>
  (options?.client ?? client).post<RecordTraceResponse, RecordTraceError, ThrowOnError>({
    ...options,
    url: "/api/record/trace"
  });

/**
 * Records a usage of the product
 * (request type: RecordUseRequest)
 */
export const recordUse = <ThrowOnError extends boolean = false>(options?: Options<RecordUseData, ThrowOnError>) =>
  (options?.client ?? client).post<RecordUseResponse, RecordUseError, ThrowOnError>({
    ...options,
    url: "/api/record/use"
  });
